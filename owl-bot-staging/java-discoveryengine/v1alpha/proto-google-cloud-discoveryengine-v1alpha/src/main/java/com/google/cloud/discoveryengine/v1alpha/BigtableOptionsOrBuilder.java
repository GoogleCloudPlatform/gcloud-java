// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/discoveryengine/v1alpha/import_config.proto

// Protobuf Java Version: 3.25.2
package com.google.cloud.discoveryengine.v1alpha;

public interface BigtableOptionsOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.cloud.discoveryengine.v1alpha.BigtableOptions)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The field name used for saving row key value in the document. The name has
   * to match the pattern `[a-zA-Z0-9][a-zA-Z0-9-_]*`.
   * </pre>
   *
   * <code>string key_field_name = 1;</code>
   * @return The keyFieldName.
   */
  java.lang.String getKeyFieldName();
  /**
   * <pre>
   * The field name used for saving row key value in the document. The name has
   * to match the pattern `[a-zA-Z0-9][a-zA-Z0-9-_]*`.
   * </pre>
   *
   * <code>string key_field_name = 1;</code>
   * @return The bytes for keyFieldName.
   */
  com.google.protobuf.ByteString
      getKeyFieldNameBytes();

  /**
   * <pre>
   * The mapping from family names to an object that contains column families
   * level information for the given column family. If a family is not present
   * in this map it will be ignored.
   * </pre>
   *
   * <code>map&lt;string, .google.cloud.discoveryengine.v1alpha.BigtableOptions.BigtableColumnFamily&gt; families = 2;</code>
   */
  int getFamiliesCount();
  /**
   * <pre>
   * The mapping from family names to an object that contains column families
   * level information for the given column family. If a family is not present
   * in this map it will be ignored.
   * </pre>
   *
   * <code>map&lt;string, .google.cloud.discoveryengine.v1alpha.BigtableOptions.BigtableColumnFamily&gt; families = 2;</code>
   */
  boolean containsFamilies(
      java.lang.String key);
  /**
   * Use {@link #getFamiliesMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, com.google.cloud.discoveryengine.v1alpha.BigtableOptions.BigtableColumnFamily>
  getFamilies();
  /**
   * <pre>
   * The mapping from family names to an object that contains column families
   * level information for the given column family. If a family is not present
   * in this map it will be ignored.
   * </pre>
   *
   * <code>map&lt;string, .google.cloud.discoveryengine.v1alpha.BigtableOptions.BigtableColumnFamily&gt; families = 2;</code>
   */
  java.util.Map<java.lang.String, com.google.cloud.discoveryengine.v1alpha.BigtableOptions.BigtableColumnFamily>
  getFamiliesMap();
  /**
   * <pre>
   * The mapping from family names to an object that contains column families
   * level information for the given column family. If a family is not present
   * in this map it will be ignored.
   * </pre>
   *
   * <code>map&lt;string, .google.cloud.discoveryengine.v1alpha.BigtableOptions.BigtableColumnFamily&gt; families = 2;</code>
   */
  /* nullable */
com.google.cloud.discoveryengine.v1alpha.BigtableOptions.BigtableColumnFamily getFamiliesOrDefault(
      java.lang.String key,
      /* nullable */
com.google.cloud.discoveryengine.v1alpha.BigtableOptions.BigtableColumnFamily defaultValue);
  /**
   * <pre>
   * The mapping from family names to an object that contains column families
   * level information for the given column family. If a family is not present
   * in this map it will be ignored.
   * </pre>
   *
   * <code>map&lt;string, .google.cloud.discoveryengine.v1alpha.BigtableOptions.BigtableColumnFamily&gt; families = 2;</code>
   */
  com.google.cloud.discoveryengine.v1alpha.BigtableOptions.BigtableColumnFamily getFamiliesOrThrow(
      java.lang.String key);
}
