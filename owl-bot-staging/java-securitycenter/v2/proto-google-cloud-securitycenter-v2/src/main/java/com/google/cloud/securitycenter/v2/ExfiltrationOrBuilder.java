// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/securitycenter/v2/exfiltration.proto

// Protobuf Java Version: 3.25.3
package com.google.cloud.securitycenter.v2;

public interface ExfiltrationOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.cloud.securitycenter.v2.Exfiltration)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * If there are multiple sources, then the data is considered "joined" between
   * them. For instance, BigQuery can join multiple tables, and each
   * table would be considered a source.
   * </pre>
   *
   * <code>repeated .google.cloud.securitycenter.v2.ExfilResource sources = 1;</code>
   */
  java.util.List<com.google.cloud.securitycenter.v2.ExfilResource> 
      getSourcesList();
  /**
   * <pre>
   * If there are multiple sources, then the data is considered "joined" between
   * them. For instance, BigQuery can join multiple tables, and each
   * table would be considered a source.
   * </pre>
   *
   * <code>repeated .google.cloud.securitycenter.v2.ExfilResource sources = 1;</code>
   */
  com.google.cloud.securitycenter.v2.ExfilResource getSources(int index);
  /**
   * <pre>
   * If there are multiple sources, then the data is considered "joined" between
   * them. For instance, BigQuery can join multiple tables, and each
   * table would be considered a source.
   * </pre>
   *
   * <code>repeated .google.cloud.securitycenter.v2.ExfilResource sources = 1;</code>
   */
  int getSourcesCount();
  /**
   * <pre>
   * If there are multiple sources, then the data is considered "joined" between
   * them. For instance, BigQuery can join multiple tables, and each
   * table would be considered a source.
   * </pre>
   *
   * <code>repeated .google.cloud.securitycenter.v2.ExfilResource sources = 1;</code>
   */
  java.util.List<? extends com.google.cloud.securitycenter.v2.ExfilResourceOrBuilder> 
      getSourcesOrBuilderList();
  /**
   * <pre>
   * If there are multiple sources, then the data is considered "joined" between
   * them. For instance, BigQuery can join multiple tables, and each
   * table would be considered a source.
   * </pre>
   *
   * <code>repeated .google.cloud.securitycenter.v2.ExfilResource sources = 1;</code>
   */
  com.google.cloud.securitycenter.v2.ExfilResourceOrBuilder getSourcesOrBuilder(
      int index);

  /**
   * <pre>
   * If there are multiple targets, each target would get a complete copy of the
   * "joined" source data.
   * </pre>
   *
   * <code>repeated .google.cloud.securitycenter.v2.ExfilResource targets = 2;</code>
   */
  java.util.List<com.google.cloud.securitycenter.v2.ExfilResource> 
      getTargetsList();
  /**
   * <pre>
   * If there are multiple targets, each target would get a complete copy of the
   * "joined" source data.
   * </pre>
   *
   * <code>repeated .google.cloud.securitycenter.v2.ExfilResource targets = 2;</code>
   */
  com.google.cloud.securitycenter.v2.ExfilResource getTargets(int index);
  /**
   * <pre>
   * If there are multiple targets, each target would get a complete copy of the
   * "joined" source data.
   * </pre>
   *
   * <code>repeated .google.cloud.securitycenter.v2.ExfilResource targets = 2;</code>
   */
  int getTargetsCount();
  /**
   * <pre>
   * If there are multiple targets, each target would get a complete copy of the
   * "joined" source data.
   * </pre>
   *
   * <code>repeated .google.cloud.securitycenter.v2.ExfilResource targets = 2;</code>
   */
  java.util.List<? extends com.google.cloud.securitycenter.v2.ExfilResourceOrBuilder> 
      getTargetsOrBuilderList();
  /**
   * <pre>
   * If there are multiple targets, each target would get a complete copy of the
   * "joined" source data.
   * </pre>
   *
   * <code>repeated .google.cloud.securitycenter.v2.ExfilResource targets = 2;</code>
   */
  com.google.cloud.securitycenter.v2.ExfilResourceOrBuilder getTargetsOrBuilder(
      int index);

  /**
   * <pre>
   * Total exfiltrated bytes processed for the entire job.
   * </pre>
   *
   * <code>int64 total_exfiltrated_bytes = 3;</code>
   * @return The totalExfiltratedBytes.
   */
  long getTotalExfiltratedBytes();
}
