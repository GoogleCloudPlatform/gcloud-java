// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/contentwarehouse/v1/pipelines.proto

package com.google.cloud.contentwarehouse.v1;

/**
 * <pre>
 * The ingestion pipeline config.
 * </pre>
 *
 * Protobuf type {@code google.cloud.contentwarehouse.v1.IngestPipelineConfig}
 */
public final class IngestPipelineConfig extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.cloud.contentwarehouse.v1.IngestPipelineConfig)
    IngestPipelineConfigOrBuilder {
private static final long serialVersionUID = 0L;
  // Use IngestPipelineConfig.newBuilder() to construct.
  private IngestPipelineConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private IngestPipelineConfig() {
    folder_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new IngestPipelineConfig();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.cloud.contentwarehouse.v1.PipelinesProto.internal_static_google_cloud_contentwarehouse_v1_IngestPipelineConfig_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.cloud.contentwarehouse.v1.PipelinesProto.internal_static_google_cloud_contentwarehouse_v1_IngestPipelineConfig_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.cloud.contentwarehouse.v1.IngestPipelineConfig.class, com.google.cloud.contentwarehouse.v1.IngestPipelineConfig.Builder.class);
  }

  public static final int DOCUMENT_ACL_POLICY_FIELD_NUMBER = 1;
  private com.google.iam.v1.Policy documentAclPolicy_;
  /**
   * <pre>
   * The document level acl policy config.
   * This refers to an Identity and Access (IAM) policy, which specifies access
   * controls for all documents ingested by the pipeline. The
   * [role][google.iam.v1.Binding.role] and
   * [members][google.iam.v1.Binding.role] under the policy needs to be
   * specified.
   *
   * The following roles are supported for document level acl control:
   * * roles/contentwarehouse.documentAdmin
   * * roles/contentwarehouse.documentEditor
   * * roles/contentwarehouse.documentViewer
   *
   * The following members are supported for document level acl control:
   * * user:user-email&#64;example.com
   * * group:group-email&#64;example.com
   * Note that for documents searched with LLM, only single level user or group
   * acl check is supported.
   * </pre>
   *
   * <code>.google.iam.v1.Policy document_acl_policy = 1;</code>
   * @return Whether the documentAclPolicy field is set.
   */
  @java.lang.Override
  public boolean hasDocumentAclPolicy() {
    return documentAclPolicy_ != null;
  }
  /**
   * <pre>
   * The document level acl policy config.
   * This refers to an Identity and Access (IAM) policy, which specifies access
   * controls for all documents ingested by the pipeline. The
   * [role][google.iam.v1.Binding.role] and
   * [members][google.iam.v1.Binding.role] under the policy needs to be
   * specified.
   *
   * The following roles are supported for document level acl control:
   * * roles/contentwarehouse.documentAdmin
   * * roles/contentwarehouse.documentEditor
   * * roles/contentwarehouse.documentViewer
   *
   * The following members are supported for document level acl control:
   * * user:user-email&#64;example.com
   * * group:group-email&#64;example.com
   * Note that for documents searched with LLM, only single level user or group
   * acl check is supported.
   * </pre>
   *
   * <code>.google.iam.v1.Policy document_acl_policy = 1;</code>
   * @return The documentAclPolicy.
   */
  @java.lang.Override
  public com.google.iam.v1.Policy getDocumentAclPolicy() {
    return documentAclPolicy_ == null ? com.google.iam.v1.Policy.getDefaultInstance() : documentAclPolicy_;
  }
  /**
   * <pre>
   * The document level acl policy config.
   * This refers to an Identity and Access (IAM) policy, which specifies access
   * controls for all documents ingested by the pipeline. The
   * [role][google.iam.v1.Binding.role] and
   * [members][google.iam.v1.Binding.role] under the policy needs to be
   * specified.
   *
   * The following roles are supported for document level acl control:
   * * roles/contentwarehouse.documentAdmin
   * * roles/contentwarehouse.documentEditor
   * * roles/contentwarehouse.documentViewer
   *
   * The following members are supported for document level acl control:
   * * user:user-email&#64;example.com
   * * group:group-email&#64;example.com
   * Note that for documents searched with LLM, only single level user or group
   * acl check is supported.
   * </pre>
   *
   * <code>.google.iam.v1.Policy document_acl_policy = 1;</code>
   */
  @java.lang.Override
  public com.google.iam.v1.PolicyOrBuilder getDocumentAclPolicyOrBuilder() {
    return documentAclPolicy_ == null ? com.google.iam.v1.Policy.getDefaultInstance() : documentAclPolicy_;
  }

  public static final int ENABLE_DOCUMENT_TEXT_EXTRACTION_FIELD_NUMBER = 2;
  private boolean enableDocumentTextExtraction_ = false;
  /**
   * <pre>
   * The document text extraction enabled flag.
   * If the flag is set to true, DWH will perform text extraction on the raw
   * document.
   * </pre>
   *
   * <code>bool enable_document_text_extraction = 2;</code>
   * @return The enableDocumentTextExtraction.
   */
  @java.lang.Override
  public boolean getEnableDocumentTextExtraction() {
    return enableDocumentTextExtraction_;
  }

  public static final int FOLDER_FIELD_NUMBER = 3;
  @SuppressWarnings("serial")
  private volatile java.lang.Object folder_ = "";
  /**
   * <pre>
   * Optional. The name of the folder to which all ingested documents will be
   * linked during ingestion process. Format is
   * `projects/{project}/locations/{location}/documents/{folder_id}`
   * </pre>
   *
   * <code>string folder = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
   * @return The folder.
   */
  @java.lang.Override
  public java.lang.String getFolder() {
    java.lang.Object ref = folder_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      folder_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Optional. The name of the folder to which all ingested documents will be
   * linked during ingestion process. Format is
   * `projects/{project}/locations/{location}/documents/{folder_id}`
   * </pre>
   *
   * <code>string folder = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
   * @return The bytes for folder.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getFolderBytes() {
    java.lang.Object ref = folder_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      folder_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (documentAclPolicy_ != null) {
      output.writeMessage(1, getDocumentAclPolicy());
    }
    if (enableDocumentTextExtraction_ != false) {
      output.writeBool(2, enableDocumentTextExtraction_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(folder_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, folder_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (documentAclPolicy_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getDocumentAclPolicy());
    }
    if (enableDocumentTextExtraction_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(2, enableDocumentTextExtraction_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(folder_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, folder_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.cloud.contentwarehouse.v1.IngestPipelineConfig)) {
      return super.equals(obj);
    }
    com.google.cloud.contentwarehouse.v1.IngestPipelineConfig other = (com.google.cloud.contentwarehouse.v1.IngestPipelineConfig) obj;

    if (hasDocumentAclPolicy() != other.hasDocumentAclPolicy()) return false;
    if (hasDocumentAclPolicy()) {
      if (!getDocumentAclPolicy()
          .equals(other.getDocumentAclPolicy())) return false;
    }
    if (getEnableDocumentTextExtraction()
        != other.getEnableDocumentTextExtraction()) return false;
    if (!getFolder()
        .equals(other.getFolder())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasDocumentAclPolicy()) {
      hash = (37 * hash) + DOCUMENT_ACL_POLICY_FIELD_NUMBER;
      hash = (53 * hash) + getDocumentAclPolicy().hashCode();
    }
    hash = (37 * hash) + ENABLE_DOCUMENT_TEXT_EXTRACTION_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getEnableDocumentTextExtraction());
    hash = (37 * hash) + FOLDER_FIELD_NUMBER;
    hash = (53 * hash) + getFolder().hashCode();
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.cloud.contentwarehouse.v1.IngestPipelineConfig parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.cloud.contentwarehouse.v1.IngestPipelineConfig parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.cloud.contentwarehouse.v1.IngestPipelineConfig parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.cloud.contentwarehouse.v1.IngestPipelineConfig parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.cloud.contentwarehouse.v1.IngestPipelineConfig parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.cloud.contentwarehouse.v1.IngestPipelineConfig parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.cloud.contentwarehouse.v1.IngestPipelineConfig parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.cloud.contentwarehouse.v1.IngestPipelineConfig parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static com.google.cloud.contentwarehouse.v1.IngestPipelineConfig parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static com.google.cloud.contentwarehouse.v1.IngestPipelineConfig parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.cloud.contentwarehouse.v1.IngestPipelineConfig parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.cloud.contentwarehouse.v1.IngestPipelineConfig parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.cloud.contentwarehouse.v1.IngestPipelineConfig prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * The ingestion pipeline config.
   * </pre>
   *
   * Protobuf type {@code google.cloud.contentwarehouse.v1.IngestPipelineConfig}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.cloud.contentwarehouse.v1.IngestPipelineConfig)
      com.google.cloud.contentwarehouse.v1.IngestPipelineConfigOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.cloud.contentwarehouse.v1.PipelinesProto.internal_static_google_cloud_contentwarehouse_v1_IngestPipelineConfig_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.cloud.contentwarehouse.v1.PipelinesProto.internal_static_google_cloud_contentwarehouse_v1_IngestPipelineConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.cloud.contentwarehouse.v1.IngestPipelineConfig.class, com.google.cloud.contentwarehouse.v1.IngestPipelineConfig.Builder.class);
    }

    // Construct using com.google.cloud.contentwarehouse.v1.IngestPipelineConfig.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      documentAclPolicy_ = null;
      if (documentAclPolicyBuilder_ != null) {
        documentAclPolicyBuilder_.dispose();
        documentAclPolicyBuilder_ = null;
      }
      enableDocumentTextExtraction_ = false;
      folder_ = "";
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.cloud.contentwarehouse.v1.PipelinesProto.internal_static_google_cloud_contentwarehouse_v1_IngestPipelineConfig_descriptor;
    }

    @java.lang.Override
    public com.google.cloud.contentwarehouse.v1.IngestPipelineConfig getDefaultInstanceForType() {
      return com.google.cloud.contentwarehouse.v1.IngestPipelineConfig.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.cloud.contentwarehouse.v1.IngestPipelineConfig build() {
      com.google.cloud.contentwarehouse.v1.IngestPipelineConfig result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.cloud.contentwarehouse.v1.IngestPipelineConfig buildPartial() {
      com.google.cloud.contentwarehouse.v1.IngestPipelineConfig result = new com.google.cloud.contentwarehouse.v1.IngestPipelineConfig(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(com.google.cloud.contentwarehouse.v1.IngestPipelineConfig result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.documentAclPolicy_ = documentAclPolicyBuilder_ == null
            ? documentAclPolicy_
            : documentAclPolicyBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.enableDocumentTextExtraction_ = enableDocumentTextExtraction_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.folder_ = folder_;
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.cloud.contentwarehouse.v1.IngestPipelineConfig) {
        return mergeFrom((com.google.cloud.contentwarehouse.v1.IngestPipelineConfig)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.cloud.contentwarehouse.v1.IngestPipelineConfig other) {
      if (other == com.google.cloud.contentwarehouse.v1.IngestPipelineConfig.getDefaultInstance()) return this;
      if (other.hasDocumentAclPolicy()) {
        mergeDocumentAclPolicy(other.getDocumentAclPolicy());
      }
      if (other.getEnableDocumentTextExtraction() != false) {
        setEnableDocumentTextExtraction(other.getEnableDocumentTextExtraction());
      }
      if (!other.getFolder().isEmpty()) {
        folder_ = other.folder_;
        bitField0_ |= 0x00000004;
        onChanged();
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getDocumentAclPolicyFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 16: {
              enableDocumentTextExtraction_ = input.readBool();
              bitField0_ |= 0x00000002;
              break;
            } // case 16
            case 26: {
              folder_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000004;
              break;
            } // case 26
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private com.google.iam.v1.Policy documentAclPolicy_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.iam.v1.Policy, com.google.iam.v1.Policy.Builder, com.google.iam.v1.PolicyOrBuilder> documentAclPolicyBuilder_;
    /**
     * <pre>
     * The document level acl policy config.
     * This refers to an Identity and Access (IAM) policy, which specifies access
     * controls for all documents ingested by the pipeline. The
     * [role][google.iam.v1.Binding.role] and
     * [members][google.iam.v1.Binding.role] under the policy needs to be
     * specified.
     *
     * The following roles are supported for document level acl control:
     * * roles/contentwarehouse.documentAdmin
     * * roles/contentwarehouse.documentEditor
     * * roles/contentwarehouse.documentViewer
     *
     * The following members are supported for document level acl control:
     * * user:user-email&#64;example.com
     * * group:group-email&#64;example.com
     * Note that for documents searched with LLM, only single level user or group
     * acl check is supported.
     * </pre>
     *
     * <code>.google.iam.v1.Policy document_acl_policy = 1;</code>
     * @return Whether the documentAclPolicy field is set.
     */
    public boolean hasDocumentAclPolicy() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The document level acl policy config.
     * This refers to an Identity and Access (IAM) policy, which specifies access
     * controls for all documents ingested by the pipeline. The
     * [role][google.iam.v1.Binding.role] and
     * [members][google.iam.v1.Binding.role] under the policy needs to be
     * specified.
     *
     * The following roles are supported for document level acl control:
     * * roles/contentwarehouse.documentAdmin
     * * roles/contentwarehouse.documentEditor
     * * roles/contentwarehouse.documentViewer
     *
     * The following members are supported for document level acl control:
     * * user:user-email&#64;example.com
     * * group:group-email&#64;example.com
     * Note that for documents searched with LLM, only single level user or group
     * acl check is supported.
     * </pre>
     *
     * <code>.google.iam.v1.Policy document_acl_policy = 1;</code>
     * @return The documentAclPolicy.
     */
    public com.google.iam.v1.Policy getDocumentAclPolicy() {
      if (documentAclPolicyBuilder_ == null) {
        return documentAclPolicy_ == null ? com.google.iam.v1.Policy.getDefaultInstance() : documentAclPolicy_;
      } else {
        return documentAclPolicyBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The document level acl policy config.
     * This refers to an Identity and Access (IAM) policy, which specifies access
     * controls for all documents ingested by the pipeline. The
     * [role][google.iam.v1.Binding.role] and
     * [members][google.iam.v1.Binding.role] under the policy needs to be
     * specified.
     *
     * The following roles are supported for document level acl control:
     * * roles/contentwarehouse.documentAdmin
     * * roles/contentwarehouse.documentEditor
     * * roles/contentwarehouse.documentViewer
     *
     * The following members are supported for document level acl control:
     * * user:user-email&#64;example.com
     * * group:group-email&#64;example.com
     * Note that for documents searched with LLM, only single level user or group
     * acl check is supported.
     * </pre>
     *
     * <code>.google.iam.v1.Policy document_acl_policy = 1;</code>
     */
    public Builder setDocumentAclPolicy(com.google.iam.v1.Policy value) {
      if (documentAclPolicyBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        documentAclPolicy_ = value;
      } else {
        documentAclPolicyBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The document level acl policy config.
     * This refers to an Identity and Access (IAM) policy, which specifies access
     * controls for all documents ingested by the pipeline. The
     * [role][google.iam.v1.Binding.role] and
     * [members][google.iam.v1.Binding.role] under the policy needs to be
     * specified.
     *
     * The following roles are supported for document level acl control:
     * * roles/contentwarehouse.documentAdmin
     * * roles/contentwarehouse.documentEditor
     * * roles/contentwarehouse.documentViewer
     *
     * The following members are supported for document level acl control:
     * * user:user-email&#64;example.com
     * * group:group-email&#64;example.com
     * Note that for documents searched with LLM, only single level user or group
     * acl check is supported.
     * </pre>
     *
     * <code>.google.iam.v1.Policy document_acl_policy = 1;</code>
     */
    public Builder setDocumentAclPolicy(
        com.google.iam.v1.Policy.Builder builderForValue) {
      if (documentAclPolicyBuilder_ == null) {
        documentAclPolicy_ = builderForValue.build();
      } else {
        documentAclPolicyBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The document level acl policy config.
     * This refers to an Identity and Access (IAM) policy, which specifies access
     * controls for all documents ingested by the pipeline. The
     * [role][google.iam.v1.Binding.role] and
     * [members][google.iam.v1.Binding.role] under the policy needs to be
     * specified.
     *
     * The following roles are supported for document level acl control:
     * * roles/contentwarehouse.documentAdmin
     * * roles/contentwarehouse.documentEditor
     * * roles/contentwarehouse.documentViewer
     *
     * The following members are supported for document level acl control:
     * * user:user-email&#64;example.com
     * * group:group-email&#64;example.com
     * Note that for documents searched with LLM, only single level user or group
     * acl check is supported.
     * </pre>
     *
     * <code>.google.iam.v1.Policy document_acl_policy = 1;</code>
     */
    public Builder mergeDocumentAclPolicy(com.google.iam.v1.Policy value) {
      if (documentAclPolicyBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          documentAclPolicy_ != null &&
          documentAclPolicy_ != com.google.iam.v1.Policy.getDefaultInstance()) {
          getDocumentAclPolicyBuilder().mergeFrom(value);
        } else {
          documentAclPolicy_ = value;
        }
      } else {
        documentAclPolicyBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The document level acl policy config.
     * This refers to an Identity and Access (IAM) policy, which specifies access
     * controls for all documents ingested by the pipeline. The
     * [role][google.iam.v1.Binding.role] and
     * [members][google.iam.v1.Binding.role] under the policy needs to be
     * specified.
     *
     * The following roles are supported for document level acl control:
     * * roles/contentwarehouse.documentAdmin
     * * roles/contentwarehouse.documentEditor
     * * roles/contentwarehouse.documentViewer
     *
     * The following members are supported for document level acl control:
     * * user:user-email&#64;example.com
     * * group:group-email&#64;example.com
     * Note that for documents searched with LLM, only single level user or group
     * acl check is supported.
     * </pre>
     *
     * <code>.google.iam.v1.Policy document_acl_policy = 1;</code>
     */
    public Builder clearDocumentAclPolicy() {
      bitField0_ = (bitField0_ & ~0x00000001);
      documentAclPolicy_ = null;
      if (documentAclPolicyBuilder_ != null) {
        documentAclPolicyBuilder_.dispose();
        documentAclPolicyBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The document level acl policy config.
     * This refers to an Identity and Access (IAM) policy, which specifies access
     * controls for all documents ingested by the pipeline. The
     * [role][google.iam.v1.Binding.role] and
     * [members][google.iam.v1.Binding.role] under the policy needs to be
     * specified.
     *
     * The following roles are supported for document level acl control:
     * * roles/contentwarehouse.documentAdmin
     * * roles/contentwarehouse.documentEditor
     * * roles/contentwarehouse.documentViewer
     *
     * The following members are supported for document level acl control:
     * * user:user-email&#64;example.com
     * * group:group-email&#64;example.com
     * Note that for documents searched with LLM, only single level user or group
     * acl check is supported.
     * </pre>
     *
     * <code>.google.iam.v1.Policy document_acl_policy = 1;</code>
     */
    public com.google.iam.v1.Policy.Builder getDocumentAclPolicyBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getDocumentAclPolicyFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The document level acl policy config.
     * This refers to an Identity and Access (IAM) policy, which specifies access
     * controls for all documents ingested by the pipeline. The
     * [role][google.iam.v1.Binding.role] and
     * [members][google.iam.v1.Binding.role] under the policy needs to be
     * specified.
     *
     * The following roles are supported for document level acl control:
     * * roles/contentwarehouse.documentAdmin
     * * roles/contentwarehouse.documentEditor
     * * roles/contentwarehouse.documentViewer
     *
     * The following members are supported for document level acl control:
     * * user:user-email&#64;example.com
     * * group:group-email&#64;example.com
     * Note that for documents searched with LLM, only single level user or group
     * acl check is supported.
     * </pre>
     *
     * <code>.google.iam.v1.Policy document_acl_policy = 1;</code>
     */
    public com.google.iam.v1.PolicyOrBuilder getDocumentAclPolicyOrBuilder() {
      if (documentAclPolicyBuilder_ != null) {
        return documentAclPolicyBuilder_.getMessageOrBuilder();
      } else {
        return documentAclPolicy_ == null ?
            com.google.iam.v1.Policy.getDefaultInstance() : documentAclPolicy_;
      }
    }
    /**
     * <pre>
     * The document level acl policy config.
     * This refers to an Identity and Access (IAM) policy, which specifies access
     * controls for all documents ingested by the pipeline. The
     * [role][google.iam.v1.Binding.role] and
     * [members][google.iam.v1.Binding.role] under the policy needs to be
     * specified.
     *
     * The following roles are supported for document level acl control:
     * * roles/contentwarehouse.documentAdmin
     * * roles/contentwarehouse.documentEditor
     * * roles/contentwarehouse.documentViewer
     *
     * The following members are supported for document level acl control:
     * * user:user-email&#64;example.com
     * * group:group-email&#64;example.com
     * Note that for documents searched with LLM, only single level user or group
     * acl check is supported.
     * </pre>
     *
     * <code>.google.iam.v1.Policy document_acl_policy = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.iam.v1.Policy, com.google.iam.v1.Policy.Builder, com.google.iam.v1.PolicyOrBuilder> 
        getDocumentAclPolicyFieldBuilder() {
      if (documentAclPolicyBuilder_ == null) {
        documentAclPolicyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.iam.v1.Policy, com.google.iam.v1.Policy.Builder, com.google.iam.v1.PolicyOrBuilder>(
                getDocumentAclPolicy(),
                getParentForChildren(),
                isClean());
        documentAclPolicy_ = null;
      }
      return documentAclPolicyBuilder_;
    }

    private boolean enableDocumentTextExtraction_ ;
    /**
     * <pre>
     * The document text extraction enabled flag.
     * If the flag is set to true, DWH will perform text extraction on the raw
     * document.
     * </pre>
     *
     * <code>bool enable_document_text_extraction = 2;</code>
     * @return The enableDocumentTextExtraction.
     */
    @java.lang.Override
    public boolean getEnableDocumentTextExtraction() {
      return enableDocumentTextExtraction_;
    }
    /**
     * <pre>
     * The document text extraction enabled flag.
     * If the flag is set to true, DWH will perform text extraction on the raw
     * document.
     * </pre>
     *
     * <code>bool enable_document_text_extraction = 2;</code>
     * @param value The enableDocumentTextExtraction to set.
     * @return This builder for chaining.
     */
    public Builder setEnableDocumentTextExtraction(boolean value) {

      enableDocumentTextExtraction_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The document text extraction enabled flag.
     * If the flag is set to true, DWH will perform text extraction on the raw
     * document.
     * </pre>
     *
     * <code>bool enable_document_text_extraction = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearEnableDocumentTextExtraction() {
      bitField0_ = (bitField0_ & ~0x00000002);
      enableDocumentTextExtraction_ = false;
      onChanged();
      return this;
    }

    private java.lang.Object folder_ = "";
    /**
     * <pre>
     * Optional. The name of the folder to which all ingested documents will be
     * linked during ingestion process. Format is
     * `projects/{project}/locations/{location}/documents/{folder_id}`
     * </pre>
     *
     * <code>string folder = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return The folder.
     */
    public java.lang.String getFolder() {
      java.lang.Object ref = folder_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        folder_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Optional. The name of the folder to which all ingested documents will be
     * linked during ingestion process. Format is
     * `projects/{project}/locations/{location}/documents/{folder_id}`
     * </pre>
     *
     * <code>string folder = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return The bytes for folder.
     */
    public com.google.protobuf.ByteString
        getFolderBytes() {
      java.lang.Object ref = folder_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        folder_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Optional. The name of the folder to which all ingested documents will be
     * linked during ingestion process. Format is
     * `projects/{project}/locations/{location}/documents/{folder_id}`
     * </pre>
     *
     * <code>string folder = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param value The folder to set.
     * @return This builder for chaining.
     */
    public Builder setFolder(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      folder_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional. The name of the folder to which all ingested documents will be
     * linked during ingestion process. Format is
     * `projects/{project}/locations/{location}/documents/{folder_id}`
     * </pre>
     *
     * <code>string folder = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return This builder for chaining.
     */
    public Builder clearFolder() {
      folder_ = getDefaultInstance().getFolder();
      bitField0_ = (bitField0_ & ~0x00000004);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional. The name of the folder to which all ingested documents will be
     * linked during ingestion process. Format is
     * `projects/{project}/locations/{location}/documents/{folder_id}`
     * </pre>
     *
     * <code>string folder = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param value The bytes for folder to set.
     * @return This builder for chaining.
     */
    public Builder setFolderBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      folder_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:google.cloud.contentwarehouse.v1.IngestPipelineConfig)
  }

  // @@protoc_insertion_point(class_scope:google.cloud.contentwarehouse.v1.IngestPipelineConfig)
  private static final com.google.cloud.contentwarehouse.v1.IngestPipelineConfig DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.cloud.contentwarehouse.v1.IngestPipelineConfig();
  }

  public static com.google.cloud.contentwarehouse.v1.IngestPipelineConfig getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<IngestPipelineConfig>
      PARSER = new com.google.protobuf.AbstractParser<IngestPipelineConfig>() {
    @java.lang.Override
    public IngestPipelineConfig parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<IngestPipelineConfig> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<IngestPipelineConfig> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.cloud.contentwarehouse.v1.IngestPipelineConfig getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

