// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/dataproc/v1/shared.proto

// Protobuf Java Version: 3.25.3
package com.google.cloud.dataproc.v1;

public interface UsageMetricsOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.cloud.dataproc.v1.UsageMetrics)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Optional. DCU (Dataproc Compute Units) usage in (`milliDCU` x `seconds`)
   * (see [Dataproc Serverless pricing]
   * (https://cloud.google.com/dataproc-serverless/pricing)).
   * </pre>
   *
   * <code>int64 milli_dcu_seconds = 1 [(.google.api.field_behavior) = OPTIONAL];</code>
   * @return The milliDcuSeconds.
   */
  long getMilliDcuSeconds();

  /**
   * <pre>
   * Optional. Shuffle storage usage in (`GB` x `seconds`) (see
   * [Dataproc Serverless pricing]
   * (https://cloud.google.com/dataproc-serverless/pricing)).
   * </pre>
   *
   * <code>int64 shuffle_storage_gb_seconds = 2 [(.google.api.field_behavior) = OPTIONAL];</code>
   * @return The shuffleStorageGbSeconds.
   */
  long getShuffleStorageGbSeconds();

  /**
   * <pre>
   * Optional. Accelerator usage in (`milliAccelerator` x `seconds`) (see
   * [Dataproc Serverless pricing]
   * (https://cloud.google.com/dataproc-serverless/pricing)).
   * </pre>
   *
   * <code>int64 milli_accelerator_seconds = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
   * @return The milliAcceleratorSeconds.
   */
  long getMilliAcceleratorSeconds();

  /**
   * <pre>
   * Optional. Accelerator type being used, if any
   * </pre>
   *
   * <code>string accelerator_type = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
   * @return The acceleratorType.
   */
  java.lang.String getAcceleratorType();
  /**
   * <pre>
   * Optional. Accelerator type being used, if any
   * </pre>
   *
   * <code>string accelerator_type = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
   * @return The bytes for acceleratorType.
   */
  com.google.protobuf.ByteString
      getAcceleratorTypeBytes();
}
