// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/analytics/admin/v1alpha/subproperty_event_filter.proto

// Protobuf Java Version: 3.25.3
package com.google.analytics.admin.v1alpha;

public interface SubpropertyEventFilterExpressionOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.analytics.admin.v1alpha.SubpropertyEventFilterExpression)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * A list of expressions to OR’ed together. Must only contain
   * not_expression or filter_condition expressions.
   * </pre>
   *
   * <code>.google.analytics.admin.v1alpha.SubpropertyEventFilterExpressionList or_group = 1;</code>
   * @return Whether the orGroup field is set.
   */
  boolean hasOrGroup();
  /**
   * <pre>
   * A list of expressions to OR’ed together. Must only contain
   * not_expression or filter_condition expressions.
   * </pre>
   *
   * <code>.google.analytics.admin.v1alpha.SubpropertyEventFilterExpressionList or_group = 1;</code>
   * @return The orGroup.
   */
  com.google.analytics.admin.v1alpha.SubpropertyEventFilterExpressionList getOrGroup();
  /**
   * <pre>
   * A list of expressions to OR’ed together. Must only contain
   * not_expression or filter_condition expressions.
   * </pre>
   *
   * <code>.google.analytics.admin.v1alpha.SubpropertyEventFilterExpressionList or_group = 1;</code>
   */
  com.google.analytics.admin.v1alpha.SubpropertyEventFilterExpressionListOrBuilder getOrGroupOrBuilder();

  /**
   * <pre>
   * A filter expression to be NOT'ed (inverted, complemented). It can only
   * include a filter. This cannot be set on the top level
   * SubpropertyEventFilterExpression.
   * </pre>
   *
   * <code>.google.analytics.admin.v1alpha.SubpropertyEventFilterExpression not_expression = 2;</code>
   * @return Whether the notExpression field is set.
   */
  boolean hasNotExpression();
  /**
   * <pre>
   * A filter expression to be NOT'ed (inverted, complemented). It can only
   * include a filter. This cannot be set on the top level
   * SubpropertyEventFilterExpression.
   * </pre>
   *
   * <code>.google.analytics.admin.v1alpha.SubpropertyEventFilterExpression not_expression = 2;</code>
   * @return The notExpression.
   */
  com.google.analytics.admin.v1alpha.SubpropertyEventFilterExpression getNotExpression();
  /**
   * <pre>
   * A filter expression to be NOT'ed (inverted, complemented). It can only
   * include a filter. This cannot be set on the top level
   * SubpropertyEventFilterExpression.
   * </pre>
   *
   * <code>.google.analytics.admin.v1alpha.SubpropertyEventFilterExpression not_expression = 2;</code>
   */
  com.google.analytics.admin.v1alpha.SubpropertyEventFilterExpressionOrBuilder getNotExpressionOrBuilder();

  /**
   * <pre>
   * Creates a filter that matches a specific event. This cannot be set on the
   * top level SubpropertyEventFilterExpression.
   * </pre>
   *
   * <code>.google.analytics.admin.v1alpha.SubpropertyEventFilterCondition filter_condition = 3;</code>
   * @return Whether the filterCondition field is set.
   */
  boolean hasFilterCondition();
  /**
   * <pre>
   * Creates a filter that matches a specific event. This cannot be set on the
   * top level SubpropertyEventFilterExpression.
   * </pre>
   *
   * <code>.google.analytics.admin.v1alpha.SubpropertyEventFilterCondition filter_condition = 3;</code>
   * @return The filterCondition.
   */
  com.google.analytics.admin.v1alpha.SubpropertyEventFilterCondition getFilterCondition();
  /**
   * <pre>
   * Creates a filter that matches a specific event. This cannot be set on the
   * top level SubpropertyEventFilterExpression.
   * </pre>
   *
   * <code>.google.analytics.admin.v1alpha.SubpropertyEventFilterCondition filter_condition = 3;</code>
   */
  com.google.analytics.admin.v1alpha.SubpropertyEventFilterConditionOrBuilder getFilterConditionOrBuilder();

  com.google.analytics.admin.v1alpha.SubpropertyEventFilterExpression.ExprCase getExprCase();
}
