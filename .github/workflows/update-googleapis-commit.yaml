name: Update googleapis commit
on:
  schedule:
  - cron: '* 2 * * *'
  workflow_dispatch:


jobs:
  update-googleapis-commit:
    runs-on: ubuntu-22.04
    env:
      # the branch with which the pull request is associated.
      branch_name: generate-libraries-main
    steps:
    - uses: actions/checkout@v4
    - name: Setup branch for pull request
      shell: bash
      run: |
        [ -z "`git config user.email`" ] && git config --global user.email "cloud-java-bot@google.com"
        [ -z "`git config user.name`" ] && git config --global user.name "cloud-java-bot"
        # try to find a open pull request associated with the branch
        pr_num=$(gh pr list -s open -H "${branch_name}" -q . --json number | jq ".[] | .number")
        # create a branch if there's no open pull request associated with the
        # branch; otherwise checkout the pull request.
        if [ -z "${pr_num}" ]; then
          git checkout -b "${branch_name}"
        else
          gh pr checkout "${pr_num}"
        fi
        echo "pr_num=${pr_num}" >> "$GITHUB_ENV"
      env:
        GH_TOKEN: ${{ secrets.CLOUD_JAVA_BOT_TOKEN }}
    - name: Update googleapis commit to latest
      shell: bash
      run: |
        mkdir tmp-googleapis
        # use partial clone because only commit history is needed.
        git clone --filter=blob:none https://github.com/googleapis/googleapis.git tmp-googleapis
        pushd tmp-googleapis
        git pull
        latest_commit=$(git rev-parse HEAD)
        popd
        rm -rf tmp-googleapis
        sed -i -e "s/^googleapis_commitish.*$/googleapis_commitish: ${latest_commit}/" generation_config.yaml
    - name: create or update the pull request
      shell: bash
      run: |
        title="chore: update googleapis commit at $(date)"
        git add generation_config.yaml
        # use --allow-empty because (rarely) there's no change.
        git commit --allow-empty -m "${title}"
        if [ -z "${pr_num}" ]; then
          git remote add monorepo https://cloud-java-bot:${GH_TOKEN}@github.com/${{ github.repository }}.git
          git fetch -q --unshallow monorepo
          git push -f monorepo "${branch_name}"
          gh pr create --title "${title}" --head "${branch_name}" --body "${title}"
        else
          git push
        fi
      env:
        GH_TOKEN: ${{ secrets.CLOUD_JAVA_BOT_TOKEN }}
        pr_num: ${{ env.pr_num }}
