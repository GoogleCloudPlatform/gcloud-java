name: Generate new GAPIC client library
on:
  workflow_dispatch:
      # some inputs are ommited due to limit of 10 input arguments
      inputs:
        api_shortname:
          required: true
          type: string
          description: "`api_shortname`: Name for the new directory name and (default) artifact name"
        name_pretty:
          required: true
          type: string
          description: "`name_pretty`: The human-friendly name that appears in README.md"
        proto_path:
          required: true
          type: string
          description: |
            `proto_path`: Path to proto file from the root of the googleapis repository to the
            directory that contains the proto files (without the version).
            For example, to generate the library for 'google/maps/routing/v2',
            then you specify this value as 'google/maps/routing'
        product_docs:
          required: true
          type: string
          description: "`product_docs`: Documentation URL that appears in README.md"
        rest_docs:
          required: false
          type: string
          description: |
            `rest_docs`: If it exists, link to the REST Documentation for a service
        rpc_docs:
          required: false
          type: string
          description: |
            `rpc_docs`: If it exists, link to the RPC Documentation for a service
        api_description:
          required: true
          description: "`api_description`: Description that appears in README.md"
        transport:
          required: false
          type: choice
          default: grpc
          options:
            - grpc
            - http
            - both
          description: "`transport`: A label that appears in repo-metadata.json"
        cloud_api:
          required: false
          default: true
          type: boolean
          description: |
            `cloud_api`: If true, the artifact ID of the library is 'google-cloud-'
            otherwise 'google-'
        group_id:
          required: false
          type: string
          description: |
            `group_id`: The group ID of the artifact when distribution name is not set

jobs:
  generate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip' # caching pip dependencies
      - name: Get current week within the year
        id: date
        run: echo "::set-output name=week_of_year::$(date +'%W' --utc)"
      - uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: 11
      - run: java -version
      - uses: actions/cache@v3
        id: mvn-cache
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-unified-${{ steps.date.outputs.week_of_year }}
      - name: Install new-client.py dependencies
        run: pip install --require-hashes -r generation/new_client/requirements.txt
      - run: echo 'a message'
      - name: Generate
        run: |
          arguments="--api_shortname=${API_SHORTNAME} \
                     --proto_path=${PROTO_PATH} \
                     --name-pretty=${NAME_PRETTY} \
                     --product-docs=${PRODUCT_DOCS} \
                     --api_description=${API_DESCRIPTION} |
                     --googleapis-gen-url=${GOOGLEAPIS_GEN_URL}"

          # helper function that appends a python argument only if specified in the GH action inputs
          append_argument() {
            py_arg=$1
            # env vars look exactly like new-client arguments but uppercase + underscores
            env_name=$(echo "${py_arg}" | sed 's/-/_/g' | sed -e 's/\([a-z]\)/\U\1/g')
            if [[ -n "${!env_name}" ]]; then
              # $(echo) is redundant but it works around a syntax highlighting problem in vim
              arguments=$(echo "${arguments} --${py_arg}=${!env_name}")
            fi
          }

          declare -a optional_args=('release-level' 'transport' 'distribution-name' 'api-id'
          'requires-billing' 'destination-name' 'cloud-api' 'group-id' 'owlbot-image'
          'library-type' 'rest-docs' 'rpc-docs')

          for python_argument in "${optional_args[@]}"; do
            append_argument "${python_argument}"
          done
          echo "${arguments}" | xargs -0 python generation/new_client/new-client.py generate
        env:
          GOOGLEAPIS_GEN_URL: https://yoshi-approver:${{ secrets.YOSHI_APPROVER_PRIVATE_TOKEN }}@github.com/googleapis/googleapis-gen.git
          API_SHORTNAME: ${{ github.event.inputs.api_shortname }}
          NAME_PRETTY: ${{ github.event.inputs.name_pretty }}
          PROTO_PATH: ${{ github.event.inputs.proto_path }}
          PRODUCT_DOCS: ${{ github.event.inputs.product_docs }}
          REST_DOCS: ${{ github.event.inputs.rest_docs }}
          RPC_DOCS: ${{ github.event.inputs.rpc_docs }}
          API_DESCRIPTION: ${{ github.event.inputs.api_description }}
          RELEASE_LEVEL: ${{ github.event.inputs.release_level }}
          TRANSPORT: ${{ github.event.inputs.transport }}
          LANGUAGE: ${{ github.event.inputs.language }}
          DISTRIBUTION_NAME: ${{ github.event.inputs.distribution_name }}
          API_ID: ${{ github.event.inputs.api_id }}
          REQUIRES_BILLING: ${{ github.event.inputs.requires_billing }}
          DESTINATION_NAME: ${{ github.event.inputs.destination_name }}
          CLOUD_API: ${{ github.event.inputs.cloud_api }}
          GROUP_ID: ${{ github.event.inputs.group_id }}
          OWLBOT_IMAGE: ${{ github.event.inputs.owlbot_image }}
          LIBRARY_TYPE: ${{ github.event.inputs.library_type }}

