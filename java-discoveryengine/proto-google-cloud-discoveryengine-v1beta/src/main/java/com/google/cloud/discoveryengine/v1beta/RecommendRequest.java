/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/discoveryengine/v1beta/recommendation_service.proto

package com.google.cloud.discoveryengine.v1beta;

/**
 *
 *
 * <pre>
 * Request message for Recommend method.
 * </pre>
 *
 * Protobuf type {@code google.cloud.discoveryengine.v1beta.RecommendRequest}
 */
public final class RecommendRequest extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:google.cloud.discoveryengine.v1beta.RecommendRequest)
    RecommendRequestOrBuilder {
  private static final long serialVersionUID = 0L;
  // Use RecommendRequest.newBuilder() to construct.
  private RecommendRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private RecommendRequest() {
    servingConfig_ = "";
    filter_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
    return new RecommendRequest();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
    return this.unknownFields;
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return com.google.cloud.discoveryengine.v1beta.RecommendationServiceProto
        .internal_static_google_cloud_discoveryengine_v1beta_RecommendRequest_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapField internalGetMapField(int number) {
    switch (number) {
      case 6:
        return internalGetParams();
      default:
        throw new RuntimeException("Invalid map field number: " + number);
    }
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.cloud.discoveryengine.v1beta.RecommendationServiceProto
        .internal_static_google_cloud_discoveryengine_v1beta_RecommendRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.cloud.discoveryengine.v1beta.RecommendRequest.class,
            com.google.cloud.discoveryengine.v1beta.RecommendRequest.Builder.class);
  }

  public static final int SERVING_CONFIG_FIELD_NUMBER = 1;
  private volatile java.lang.Object servingConfig_;
  /**
   *
   *
   * <pre>
   * Required. Full resource name of the format:
   * projects/&#42;&#47;locations/global/dataStores/&#42;&#47;servingConfigs/&#42;
   * Before you can request recommendations from your model, you must create at
   * least one serving config  for it.
   * </pre>
   *
   * <code>
   * string serving_config = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }
   * </code>
   *
   * @return The servingConfig.
   */
  @java.lang.Override
  public java.lang.String getServingConfig() {
    java.lang.Object ref = servingConfig_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      servingConfig_ = s;
      return s;
    }
  }
  /**
   *
   *
   * <pre>
   * Required. Full resource name of the format:
   * projects/&#42;&#47;locations/global/dataStores/&#42;&#47;servingConfigs/&#42;
   * Before you can request recommendations from your model, you must create at
   * least one serving config  for it.
   * </pre>
   *
   * <code>
   * string serving_config = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }
   * </code>
   *
   * @return The bytes for servingConfig.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getServingConfigBytes() {
    java.lang.Object ref = servingConfig_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      servingConfig_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int USER_EVENT_FIELD_NUMBER = 2;
  private com.google.cloud.discoveryengine.v1beta.UserEvent userEvent_;
  /**
   *
   *
   * <pre>
   * Required. Context about the user, what they are looking at and what action
   * they took to trigger the Recommend request. Note that this user event
   * detail won't be ingested to userEvent logs. Thus, a separate userEvent
   * write request is required for event logging.
   * Don't set
   * [UserEvent.user_pseudo_id][google.cloud.discoveryengine.v1beta.UserEvent.user_pseudo_id]
   * or
   * [UserEvent.user_info.user_id][google.cloud.discoveryengine.v1beta.UserInfo.user_id]
   * to the same fixed ID for different users. If you are trying to receive
   * non-personalized recommendations (not recommended; this can negatively
   * impact model performance), instead set
   * [UserEvent.user_pseudo_id][google.cloud.discoveryengine.v1beta.UserEvent.user_pseudo_id]
   * to a random unique ID and leave
   * [UserEvent.user_info.user_id][google.cloud.discoveryengine.v1beta.UserInfo.user_id]
   * unset.
   * </pre>
   *
   * <code>
   * .google.cloud.discoveryengine.v1beta.UserEvent user_event = 2 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   *
   * @return Whether the userEvent field is set.
   */
  @java.lang.Override
  public boolean hasUserEvent() {
    return userEvent_ != null;
  }
  /**
   *
   *
   * <pre>
   * Required. Context about the user, what they are looking at and what action
   * they took to trigger the Recommend request. Note that this user event
   * detail won't be ingested to userEvent logs. Thus, a separate userEvent
   * write request is required for event logging.
   * Don't set
   * [UserEvent.user_pseudo_id][google.cloud.discoveryengine.v1beta.UserEvent.user_pseudo_id]
   * or
   * [UserEvent.user_info.user_id][google.cloud.discoveryengine.v1beta.UserInfo.user_id]
   * to the same fixed ID for different users. If you are trying to receive
   * non-personalized recommendations (not recommended; this can negatively
   * impact model performance), instead set
   * [UserEvent.user_pseudo_id][google.cloud.discoveryengine.v1beta.UserEvent.user_pseudo_id]
   * to a random unique ID and leave
   * [UserEvent.user_info.user_id][google.cloud.discoveryengine.v1beta.UserInfo.user_id]
   * unset.
   * </pre>
   *
   * <code>
   * .google.cloud.discoveryengine.v1beta.UserEvent user_event = 2 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   *
   * @return The userEvent.
   */
  @java.lang.Override
  public com.google.cloud.discoveryengine.v1beta.UserEvent getUserEvent() {
    return userEvent_ == null
        ? com.google.cloud.discoveryengine.v1beta.UserEvent.getDefaultInstance()
        : userEvent_;
  }
  /**
   *
   *
   * <pre>
   * Required. Context about the user, what they are looking at and what action
   * they took to trigger the Recommend request. Note that this user event
   * detail won't be ingested to userEvent logs. Thus, a separate userEvent
   * write request is required for event logging.
   * Don't set
   * [UserEvent.user_pseudo_id][google.cloud.discoveryengine.v1beta.UserEvent.user_pseudo_id]
   * or
   * [UserEvent.user_info.user_id][google.cloud.discoveryengine.v1beta.UserInfo.user_id]
   * to the same fixed ID for different users. If you are trying to receive
   * non-personalized recommendations (not recommended; this can negatively
   * impact model performance), instead set
   * [UserEvent.user_pseudo_id][google.cloud.discoveryengine.v1beta.UserEvent.user_pseudo_id]
   * to a random unique ID and leave
   * [UserEvent.user_info.user_id][google.cloud.discoveryengine.v1beta.UserInfo.user_id]
   * unset.
   * </pre>
   *
   * <code>
   * .google.cloud.discoveryengine.v1beta.UserEvent user_event = 2 [(.google.api.field_behavior) = REQUIRED];
   * </code>
   */
  @java.lang.Override
  public com.google.cloud.discoveryengine.v1beta.UserEventOrBuilder getUserEventOrBuilder() {
    return getUserEvent();
  }

  public static final int PAGE_SIZE_FIELD_NUMBER = 3;
  private int pageSize_;
  /**
   *
   *
   * <pre>
   * Maximum number of results to return. Set this property
   * to the number of recommendation results needed. If zero, the service will
   * choose a reasonable default. The maximum allowed value is 100. Values
   * above 100 will be coerced to 100.
   * </pre>
   *
   * <code>int32 page_size = 3;</code>
   *
   * @return The pageSize.
   */
  @java.lang.Override
  public int getPageSize() {
    return pageSize_;
  }

  public static final int FILTER_FIELD_NUMBER = 4;
  private volatile java.lang.Object filter_;
  /**
   *
   *
   * <pre>
   * Filter for restricting recommendation results with a length limit of 5,000
   * characters. Currently, only filter expressions on the `filter_tags`
   * attribute is supported.
   * Examples:
   *  * (filter_tags: ANY("Red", "Blue") OR filter_tags: ANY("Hot", "Cold"))
   *  * (filter_tags: ANY("Red", "Blue")) AND NOT (filter_tags: ANY("Green"))
   * If your filter blocks all results, the API will return generic
   * (unfiltered) popular Documents. If you only want results strictly matching
   * the filters, set `strictFiltering` to True in
   * [RecommendRequest.params][google.cloud.discoveryengine.v1beta.RecommendRequest.params]
   * to receive empty results instead.
   * Note that the API will never return Documents with storageStatus of
   * "EXPIRED" or "DELETED" regardless of filter choices.
   * </pre>
   *
   * <code>string filter = 4;</code>
   *
   * @return The filter.
   */
  @java.lang.Override
  public java.lang.String getFilter() {
    java.lang.Object ref = filter_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      filter_ = s;
      return s;
    }
  }
  /**
   *
   *
   * <pre>
   * Filter for restricting recommendation results with a length limit of 5,000
   * characters. Currently, only filter expressions on the `filter_tags`
   * attribute is supported.
   * Examples:
   *  * (filter_tags: ANY("Red", "Blue") OR filter_tags: ANY("Hot", "Cold"))
   *  * (filter_tags: ANY("Red", "Blue")) AND NOT (filter_tags: ANY("Green"))
   * If your filter blocks all results, the API will return generic
   * (unfiltered) popular Documents. If you only want results strictly matching
   * the filters, set `strictFiltering` to True in
   * [RecommendRequest.params][google.cloud.discoveryengine.v1beta.RecommendRequest.params]
   * to receive empty results instead.
   * Note that the API will never return Documents with storageStatus of
   * "EXPIRED" or "DELETED" regardless of filter choices.
   * </pre>
   *
   * <code>string filter = 4;</code>
   *
   * @return The bytes for filter.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getFilterBytes() {
    java.lang.Object ref = filter_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      filter_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int VALIDATE_ONLY_FIELD_NUMBER = 5;
  private boolean validateOnly_;
  /**
   *
   *
   * <pre>
   * Use validate only mode for this recommendation query. If set to true, a
   * fake model will be used that returns arbitrary Document IDs.
   * Note that the validate only mode should only be used for testing the API,
   * or if the model is not ready.
   * </pre>
   *
   * <code>bool validate_only = 5;</code>
   *
   * @return The validateOnly.
   */
  @java.lang.Override
  public boolean getValidateOnly() {
    return validateOnly_;
  }

  public static final int PARAMS_FIELD_NUMBER = 6;

  private static final class ParamsDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<java.lang.String, com.google.protobuf.Value>
        defaultEntry =
            com.google.protobuf.MapEntry
                .<java.lang.String, com.google.protobuf.Value>newDefaultInstance(
                    com.google.cloud.discoveryengine.v1beta.RecommendationServiceProto
                        .internal_static_google_cloud_discoveryengine_v1beta_RecommendRequest_ParamsEntry_descriptor,
                    com.google.protobuf.WireFormat.FieldType.STRING,
                    "",
                    com.google.protobuf.WireFormat.FieldType.MESSAGE,
                    com.google.protobuf.Value.getDefaultInstance());
  }

  private com.google.protobuf.MapField<java.lang.String, com.google.protobuf.Value> params_;

  private com.google.protobuf.MapField<java.lang.String, com.google.protobuf.Value>
      internalGetParams() {
    if (params_ == null) {
      return com.google.protobuf.MapField.emptyMapField(ParamsDefaultEntryHolder.defaultEntry);
    }
    return params_;
  }

  public int getParamsCount() {
    return internalGetParams().getMap().size();
  }
  /**
   *
   *
   * <pre>
   * Additional domain specific parameters for the recommendations.
   * Allowed values:
   * * `returnDocument`: Boolean. If set to true, the associated Document
   *    object will be returned in
   *    [RecommendResponse.results.document][RecommendationResult.document].
   * * `returnScore`: Boolean. If set to true, the recommendation 'score'
   *    corresponding to each returned Document will be set in
   *    [RecommendResponse.results.metadata][RecommendationResult.metadata]. The
   *    given 'score' indicates the probability of a Document conversion given
   *    the user's context and history.
   * * `strictFiltering`: Boolean. True by default. If set to false, the service
   *    will return generic (unfiltered) popular Documents instead of empty if
   *    your filter blocks all recommendation results.
   * * `diversityLevel`: String. Default empty. If set to be non-empty, then
   *    it needs to be one of:
   *    *  'no-diversity'
   *    *  'low-diversity'
   *    *  'medium-diversity'
   *    *  'high-diversity'
   *    *  'auto-diversity'
   *    This gives request-level control and adjusts recommendation results
   *    based on Document category.
   * </pre>
   *
   * <code>map&lt;string, .google.protobuf.Value&gt; params = 6;</code>
   */
  @java.lang.Override
  public boolean containsParams(java.lang.String key) {
    if (key == null) {
      throw new NullPointerException("map key");
    }
    return internalGetParams().getMap().containsKey(key);
  }
  /** Use {@link #getParamsMap()} instead. */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, com.google.protobuf.Value> getParams() {
    return getParamsMap();
  }
  /**
   *
   *
   * <pre>
   * Additional domain specific parameters for the recommendations.
   * Allowed values:
   * * `returnDocument`: Boolean. If set to true, the associated Document
   *    object will be returned in
   *    [RecommendResponse.results.document][RecommendationResult.document].
   * * `returnScore`: Boolean. If set to true, the recommendation 'score'
   *    corresponding to each returned Document will be set in
   *    [RecommendResponse.results.metadata][RecommendationResult.metadata]. The
   *    given 'score' indicates the probability of a Document conversion given
   *    the user's context and history.
   * * `strictFiltering`: Boolean. True by default. If set to false, the service
   *    will return generic (unfiltered) popular Documents instead of empty if
   *    your filter blocks all recommendation results.
   * * `diversityLevel`: String. Default empty. If set to be non-empty, then
   *    it needs to be one of:
   *    *  'no-diversity'
   *    *  'low-diversity'
   *    *  'medium-diversity'
   *    *  'high-diversity'
   *    *  'auto-diversity'
   *    This gives request-level control and adjusts recommendation results
   *    based on Document category.
   * </pre>
   *
   * <code>map&lt;string, .google.protobuf.Value&gt; params = 6;</code>
   */
  @java.lang.Override
  public java.util.Map<java.lang.String, com.google.protobuf.Value> getParamsMap() {
    return internalGetParams().getMap();
  }
  /**
   *
   *
   * <pre>
   * Additional domain specific parameters for the recommendations.
   * Allowed values:
   * * `returnDocument`: Boolean. If set to true, the associated Document
   *    object will be returned in
   *    [RecommendResponse.results.document][RecommendationResult.document].
   * * `returnScore`: Boolean. If set to true, the recommendation 'score'
   *    corresponding to each returned Document will be set in
   *    [RecommendResponse.results.metadata][RecommendationResult.metadata]. The
   *    given 'score' indicates the probability of a Document conversion given
   *    the user's context and history.
   * * `strictFiltering`: Boolean. True by default. If set to false, the service
   *    will return generic (unfiltered) popular Documents instead of empty if
   *    your filter blocks all recommendation results.
   * * `diversityLevel`: String. Default empty. If set to be non-empty, then
   *    it needs to be one of:
   *    *  'no-diversity'
   *    *  'low-diversity'
   *    *  'medium-diversity'
   *    *  'high-diversity'
   *    *  'auto-diversity'
   *    This gives request-level control and adjusts recommendation results
   *    based on Document category.
   * </pre>
   *
   * <code>map&lt;string, .google.protobuf.Value&gt; params = 6;</code>
   */
  @java.lang.Override
  public com.google.protobuf.Value getParamsOrDefault(
      java.lang.String key, com.google.protobuf.Value defaultValue) {
    if (key == null) {
      throw new NullPointerException("map key");
    }
    java.util.Map<java.lang.String, com.google.protobuf.Value> map = internalGetParams().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   *
   *
   * <pre>
   * Additional domain specific parameters for the recommendations.
   * Allowed values:
   * * `returnDocument`: Boolean. If set to true, the associated Document
   *    object will be returned in
   *    [RecommendResponse.results.document][RecommendationResult.document].
   * * `returnScore`: Boolean. If set to true, the recommendation 'score'
   *    corresponding to each returned Document will be set in
   *    [RecommendResponse.results.metadata][RecommendationResult.metadata]. The
   *    given 'score' indicates the probability of a Document conversion given
   *    the user's context and history.
   * * `strictFiltering`: Boolean. True by default. If set to false, the service
   *    will return generic (unfiltered) popular Documents instead of empty if
   *    your filter blocks all recommendation results.
   * * `diversityLevel`: String. Default empty. If set to be non-empty, then
   *    it needs to be one of:
   *    *  'no-diversity'
   *    *  'low-diversity'
   *    *  'medium-diversity'
   *    *  'high-diversity'
   *    *  'auto-diversity'
   *    This gives request-level control and adjusts recommendation results
   *    based on Document category.
   * </pre>
   *
   * <code>map&lt;string, .google.protobuf.Value&gt; params = 6;</code>
   */
  @java.lang.Override
  public com.google.protobuf.Value getParamsOrThrow(java.lang.String key) {
    if (key == null) {
      throw new NullPointerException("map key");
    }
    java.util.Map<java.lang.String, com.google.protobuf.Value> map = internalGetParams().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(servingConfig_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, servingConfig_);
    }
    if (userEvent_ != null) {
      output.writeMessage(2, getUserEvent());
    }
    if (pageSize_ != 0) {
      output.writeInt32(3, pageSize_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(filter_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, filter_);
    }
    if (validateOnly_ != false) {
      output.writeBool(5, validateOnly_);
    }
    com.google.protobuf.GeneratedMessageV3.serializeStringMapTo(
        output, internalGetParams(), ParamsDefaultEntryHolder.defaultEntry, 6);
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(servingConfig_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, servingConfig_);
    }
    if (userEvent_ != null) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(2, getUserEvent());
    }
    if (pageSize_ != 0) {
      size += com.google.protobuf.CodedOutputStream.computeInt32Size(3, pageSize_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(filter_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, filter_);
    }
    if (validateOnly_ != false) {
      size += com.google.protobuf.CodedOutputStream.computeBoolSize(5, validateOnly_);
    }
    for (java.util.Map.Entry<java.lang.String, com.google.protobuf.Value> entry :
        internalGetParams().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, com.google.protobuf.Value> params__ =
          ParamsDefaultEntryHolder.defaultEntry
              .newBuilderForType()
              .setKey(entry.getKey())
              .setValue(entry.getValue())
              .build();
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(6, params__);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof com.google.cloud.discoveryengine.v1beta.RecommendRequest)) {
      return super.equals(obj);
    }
    com.google.cloud.discoveryengine.v1beta.RecommendRequest other =
        (com.google.cloud.discoveryengine.v1beta.RecommendRequest) obj;

    if (!getServingConfig().equals(other.getServingConfig())) return false;
    if (hasUserEvent() != other.hasUserEvent()) return false;
    if (hasUserEvent()) {
      if (!getUserEvent().equals(other.getUserEvent())) return false;
    }
    if (getPageSize() != other.getPageSize()) return false;
    if (!getFilter().equals(other.getFilter())) return false;
    if (getValidateOnly() != other.getValidateOnly()) return false;
    if (!internalGetParams().equals(other.internalGetParams())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + SERVING_CONFIG_FIELD_NUMBER;
    hash = (53 * hash) + getServingConfig().hashCode();
    if (hasUserEvent()) {
      hash = (37 * hash) + USER_EVENT_FIELD_NUMBER;
      hash = (53 * hash) + getUserEvent().hashCode();
    }
    hash = (37 * hash) + PAGE_SIZE_FIELD_NUMBER;
    hash = (53 * hash) + getPageSize();
    hash = (37 * hash) + FILTER_FIELD_NUMBER;
    hash = (53 * hash) + getFilter().hashCode();
    hash = (37 * hash) + VALIDATE_ONLY_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(getValidateOnly());
    if (!internalGetParams().getMap().isEmpty()) {
      hash = (37 * hash) + PARAMS_FIELD_NUMBER;
      hash = (53 * hash) + internalGetParams().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.cloud.discoveryengine.v1beta.RecommendRequest parseFrom(
      java.nio.ByteBuffer data) throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.discoveryengine.v1beta.RecommendRequest parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.discoveryengine.v1beta.RecommendRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.discoveryengine.v1beta.RecommendRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.discoveryengine.v1beta.RecommendRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.discoveryengine.v1beta.RecommendRequest parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.discoveryengine.v1beta.RecommendRequest parseFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.cloud.discoveryengine.v1beta.RecommendRequest parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.cloud.discoveryengine.v1beta.RecommendRequest parseDelimitedFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static com.google.cloud.discoveryengine.v1beta.RecommendRequest parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.cloud.discoveryengine.v1beta.RecommendRequest parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.cloud.discoveryengine.v1beta.RecommendRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(
      com.google.cloud.discoveryengine.v1beta.RecommendRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   *
   *
   * <pre>
   * Request message for Recommend method.
   * </pre>
   *
   * Protobuf type {@code google.cloud.discoveryengine.v1beta.RecommendRequest}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:google.cloud.discoveryengine.v1beta.RecommendRequest)
      com.google.cloud.discoveryengine.v1beta.RecommendRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.cloud.discoveryengine.v1beta.RecommendationServiceProto
          .internal_static_google_cloud_discoveryengine_v1beta_RecommendRequest_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(int number) {
      switch (number) {
        case 6:
          return internalGetParams();
        default:
          throw new RuntimeException("Invalid map field number: " + number);
      }
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(int number) {
      switch (number) {
        case 6:
          return internalGetMutableParams();
        default:
          throw new RuntimeException("Invalid map field number: " + number);
      }
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.cloud.discoveryengine.v1beta.RecommendationServiceProto
          .internal_static_google_cloud_discoveryengine_v1beta_RecommendRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.cloud.discoveryengine.v1beta.RecommendRequest.class,
              com.google.cloud.discoveryengine.v1beta.RecommendRequest.Builder.class);
    }

    // Construct using com.google.cloud.discoveryengine.v1beta.RecommendRequest.newBuilder()
    private Builder() {}

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      servingConfig_ = "";

      if (userEventBuilder_ == null) {
        userEvent_ = null;
      } else {
        userEvent_ = null;
        userEventBuilder_ = null;
      }
      pageSize_ = 0;

      filter_ = "";

      validateOnly_ = false;

      internalGetMutableParams().clear();
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return com.google.cloud.discoveryengine.v1beta.RecommendationServiceProto
          .internal_static_google_cloud_discoveryengine_v1beta_RecommendRequest_descriptor;
    }

    @java.lang.Override
    public com.google.cloud.discoveryengine.v1beta.RecommendRequest getDefaultInstanceForType() {
      return com.google.cloud.discoveryengine.v1beta.RecommendRequest.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.cloud.discoveryengine.v1beta.RecommendRequest build() {
      com.google.cloud.discoveryengine.v1beta.RecommendRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.cloud.discoveryengine.v1beta.RecommendRequest buildPartial() {
      com.google.cloud.discoveryengine.v1beta.RecommendRequest result =
          new com.google.cloud.discoveryengine.v1beta.RecommendRequest(this);
      int from_bitField0_ = bitField0_;
      result.servingConfig_ = servingConfig_;
      if (userEventBuilder_ == null) {
        result.userEvent_ = userEvent_;
      } else {
        result.userEvent_ = userEventBuilder_.build();
      }
      result.pageSize_ = pageSize_;
      result.filter_ = filter_;
      result.validateOnly_ = validateOnly_;
      result.params_ = internalGetParams();
      result.params_.makeImmutable();
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }

    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.cloud.discoveryengine.v1beta.RecommendRequest) {
        return mergeFrom((com.google.cloud.discoveryengine.v1beta.RecommendRequest) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.cloud.discoveryengine.v1beta.RecommendRequest other) {
      if (other == com.google.cloud.discoveryengine.v1beta.RecommendRequest.getDefaultInstance())
        return this;
      if (!other.getServingConfig().isEmpty()) {
        servingConfig_ = other.servingConfig_;
        onChanged();
      }
      if (other.hasUserEvent()) {
        mergeUserEvent(other.getUserEvent());
      }
      if (other.getPageSize() != 0) {
        setPageSize(other.getPageSize());
      }
      if (!other.getFilter().isEmpty()) {
        filter_ = other.filter_;
        onChanged();
      }
      if (other.getValidateOnly() != false) {
        setValidateOnly(other.getValidateOnly());
      }
      internalGetMutableParams().mergeFrom(other.internalGetParams());
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10:
              {
                servingConfig_ = input.readStringRequireUtf8();

                break;
              } // case 10
            case 18:
              {
                input.readMessage(getUserEventFieldBuilder().getBuilder(), extensionRegistry);

                break;
              } // case 18
            case 24:
              {
                pageSize_ = input.readInt32();

                break;
              } // case 24
            case 34:
              {
                filter_ = input.readStringRequireUtf8();

                break;
              } // case 34
            case 40:
              {
                validateOnly_ = input.readBool();

                break;
              } // case 40
            case 50:
              {
                com.google.protobuf.MapEntry<java.lang.String, com.google.protobuf.Value> params__ =
                    input.readMessage(
                        ParamsDefaultEntryHolder.defaultEntry.getParserForType(),
                        extensionRegistry);
                internalGetMutableParams()
                    .getMutableMap()
                    .put(params__.getKey(), params__.getValue());
                break;
              } // case 50
            default:
              {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }

    private int bitField0_;

    private java.lang.Object servingConfig_ = "";
    /**
     *
     *
     * <pre>
     * Required. Full resource name of the format:
     * projects/&#42;&#47;locations/global/dataStores/&#42;&#47;servingConfigs/&#42;
     * Before you can request recommendations from your model, you must create at
     * least one serving config  for it.
     * </pre>
     *
     * <code>
     * string serving_config = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }
     * </code>
     *
     * @return The servingConfig.
     */
    public java.lang.String getServingConfig() {
      java.lang.Object ref = servingConfig_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        servingConfig_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * Required. Full resource name of the format:
     * projects/&#42;&#47;locations/global/dataStores/&#42;&#47;servingConfigs/&#42;
     * Before you can request recommendations from your model, you must create at
     * least one serving config  for it.
     * </pre>
     *
     * <code>
     * string serving_config = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }
     * </code>
     *
     * @return The bytes for servingConfig.
     */
    public com.google.protobuf.ByteString getServingConfigBytes() {
      java.lang.Object ref = servingConfig_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        servingConfig_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * Required. Full resource name of the format:
     * projects/&#42;&#47;locations/global/dataStores/&#42;&#47;servingConfigs/&#42;
     * Before you can request recommendations from your model, you must create at
     * least one serving config  for it.
     * </pre>
     *
     * <code>
     * string serving_config = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }
     * </code>
     *
     * @param value The servingConfig to set.
     * @return This builder for chaining.
     */
    public Builder setServingConfig(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }

      servingConfig_ = value;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. Full resource name of the format:
     * projects/&#42;&#47;locations/global/dataStores/&#42;&#47;servingConfigs/&#42;
     * Before you can request recommendations from your model, you must create at
     * least one serving config  for it.
     * </pre>
     *
     * <code>
     * string serving_config = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }
     * </code>
     *
     * @return This builder for chaining.
     */
    public Builder clearServingConfig() {

      servingConfig_ = getDefaultInstance().getServingConfig();
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. Full resource name of the format:
     * projects/&#42;&#47;locations/global/dataStores/&#42;&#47;servingConfigs/&#42;
     * Before you can request recommendations from your model, you must create at
     * least one serving config  for it.
     * </pre>
     *
     * <code>
     * string serving_config = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }
     * </code>
     *
     * @param value The bytes for servingConfig to set.
     * @return This builder for chaining.
     */
    public Builder setServingConfigBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);

      servingConfig_ = value;
      onChanged();
      return this;
    }

    private com.google.cloud.discoveryengine.v1beta.UserEvent userEvent_;
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.cloud.discoveryengine.v1beta.UserEvent,
            com.google.cloud.discoveryengine.v1beta.UserEvent.Builder,
            com.google.cloud.discoveryengine.v1beta.UserEventOrBuilder>
        userEventBuilder_;
    /**
     *
     *
     * <pre>
     * Required. Context about the user, what they are looking at and what action
     * they took to trigger the Recommend request. Note that this user event
     * detail won't be ingested to userEvent logs. Thus, a separate userEvent
     * write request is required for event logging.
     * Don't set
     * [UserEvent.user_pseudo_id][google.cloud.discoveryengine.v1beta.UserEvent.user_pseudo_id]
     * or
     * [UserEvent.user_info.user_id][google.cloud.discoveryengine.v1beta.UserInfo.user_id]
     * to the same fixed ID for different users. If you are trying to receive
     * non-personalized recommendations (not recommended; this can negatively
     * impact model performance), instead set
     * [UserEvent.user_pseudo_id][google.cloud.discoveryengine.v1beta.UserEvent.user_pseudo_id]
     * to a random unique ID and leave
     * [UserEvent.user_info.user_id][google.cloud.discoveryengine.v1beta.UserInfo.user_id]
     * unset.
     * </pre>
     *
     * <code>
     * .google.cloud.discoveryengine.v1beta.UserEvent user_event = 2 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @return Whether the userEvent field is set.
     */
    public boolean hasUserEvent() {
      return userEventBuilder_ != null || userEvent_ != null;
    }
    /**
     *
     *
     * <pre>
     * Required. Context about the user, what they are looking at and what action
     * they took to trigger the Recommend request. Note that this user event
     * detail won't be ingested to userEvent logs. Thus, a separate userEvent
     * write request is required for event logging.
     * Don't set
     * [UserEvent.user_pseudo_id][google.cloud.discoveryengine.v1beta.UserEvent.user_pseudo_id]
     * or
     * [UserEvent.user_info.user_id][google.cloud.discoveryengine.v1beta.UserInfo.user_id]
     * to the same fixed ID for different users. If you are trying to receive
     * non-personalized recommendations (not recommended; this can negatively
     * impact model performance), instead set
     * [UserEvent.user_pseudo_id][google.cloud.discoveryengine.v1beta.UserEvent.user_pseudo_id]
     * to a random unique ID and leave
     * [UserEvent.user_info.user_id][google.cloud.discoveryengine.v1beta.UserInfo.user_id]
     * unset.
     * </pre>
     *
     * <code>
     * .google.cloud.discoveryengine.v1beta.UserEvent user_event = 2 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     *
     * @return The userEvent.
     */
    public com.google.cloud.discoveryengine.v1beta.UserEvent getUserEvent() {
      if (userEventBuilder_ == null) {
        return userEvent_ == null
            ? com.google.cloud.discoveryengine.v1beta.UserEvent.getDefaultInstance()
            : userEvent_;
      } else {
        return userEventBuilder_.getMessage();
      }
    }
    /**
     *
     *
     * <pre>
     * Required. Context about the user, what they are looking at and what action
     * they took to trigger the Recommend request. Note that this user event
     * detail won't be ingested to userEvent logs. Thus, a separate userEvent
     * write request is required for event logging.
     * Don't set
     * [UserEvent.user_pseudo_id][google.cloud.discoveryengine.v1beta.UserEvent.user_pseudo_id]
     * or
     * [UserEvent.user_info.user_id][google.cloud.discoveryengine.v1beta.UserInfo.user_id]
     * to the same fixed ID for different users. If you are trying to receive
     * non-personalized recommendations (not recommended; this can negatively
     * impact model performance), instead set
     * [UserEvent.user_pseudo_id][google.cloud.discoveryengine.v1beta.UserEvent.user_pseudo_id]
     * to a random unique ID and leave
     * [UserEvent.user_info.user_id][google.cloud.discoveryengine.v1beta.UserInfo.user_id]
     * unset.
     * </pre>
     *
     * <code>
     * .google.cloud.discoveryengine.v1beta.UserEvent user_event = 2 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public Builder setUserEvent(com.google.cloud.discoveryengine.v1beta.UserEvent value) {
      if (userEventBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        userEvent_ = value;
        onChanged();
      } else {
        userEventBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. Context about the user, what they are looking at and what action
     * they took to trigger the Recommend request. Note that this user event
     * detail won't be ingested to userEvent logs. Thus, a separate userEvent
     * write request is required for event logging.
     * Don't set
     * [UserEvent.user_pseudo_id][google.cloud.discoveryengine.v1beta.UserEvent.user_pseudo_id]
     * or
     * [UserEvent.user_info.user_id][google.cloud.discoveryengine.v1beta.UserInfo.user_id]
     * to the same fixed ID for different users. If you are trying to receive
     * non-personalized recommendations (not recommended; this can negatively
     * impact model performance), instead set
     * [UserEvent.user_pseudo_id][google.cloud.discoveryengine.v1beta.UserEvent.user_pseudo_id]
     * to a random unique ID and leave
     * [UserEvent.user_info.user_id][google.cloud.discoveryengine.v1beta.UserInfo.user_id]
     * unset.
     * </pre>
     *
     * <code>
     * .google.cloud.discoveryengine.v1beta.UserEvent user_event = 2 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public Builder setUserEvent(
        com.google.cloud.discoveryengine.v1beta.UserEvent.Builder builderForValue) {
      if (userEventBuilder_ == null) {
        userEvent_ = builderForValue.build();
        onChanged();
      } else {
        userEventBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. Context about the user, what they are looking at and what action
     * they took to trigger the Recommend request. Note that this user event
     * detail won't be ingested to userEvent logs. Thus, a separate userEvent
     * write request is required for event logging.
     * Don't set
     * [UserEvent.user_pseudo_id][google.cloud.discoveryengine.v1beta.UserEvent.user_pseudo_id]
     * or
     * [UserEvent.user_info.user_id][google.cloud.discoveryengine.v1beta.UserInfo.user_id]
     * to the same fixed ID for different users. If you are trying to receive
     * non-personalized recommendations (not recommended; this can negatively
     * impact model performance), instead set
     * [UserEvent.user_pseudo_id][google.cloud.discoveryengine.v1beta.UserEvent.user_pseudo_id]
     * to a random unique ID and leave
     * [UserEvent.user_info.user_id][google.cloud.discoveryengine.v1beta.UserInfo.user_id]
     * unset.
     * </pre>
     *
     * <code>
     * .google.cloud.discoveryengine.v1beta.UserEvent user_event = 2 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public Builder mergeUserEvent(com.google.cloud.discoveryengine.v1beta.UserEvent value) {
      if (userEventBuilder_ == null) {
        if (userEvent_ != null) {
          userEvent_ =
              com.google.cloud.discoveryengine.v1beta.UserEvent.newBuilder(userEvent_)
                  .mergeFrom(value)
                  .buildPartial();
        } else {
          userEvent_ = value;
        }
        onChanged();
      } else {
        userEventBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. Context about the user, what they are looking at and what action
     * they took to trigger the Recommend request. Note that this user event
     * detail won't be ingested to userEvent logs. Thus, a separate userEvent
     * write request is required for event logging.
     * Don't set
     * [UserEvent.user_pseudo_id][google.cloud.discoveryengine.v1beta.UserEvent.user_pseudo_id]
     * or
     * [UserEvent.user_info.user_id][google.cloud.discoveryengine.v1beta.UserInfo.user_id]
     * to the same fixed ID for different users. If you are trying to receive
     * non-personalized recommendations (not recommended; this can negatively
     * impact model performance), instead set
     * [UserEvent.user_pseudo_id][google.cloud.discoveryengine.v1beta.UserEvent.user_pseudo_id]
     * to a random unique ID and leave
     * [UserEvent.user_info.user_id][google.cloud.discoveryengine.v1beta.UserInfo.user_id]
     * unset.
     * </pre>
     *
     * <code>
     * .google.cloud.discoveryengine.v1beta.UserEvent user_event = 2 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public Builder clearUserEvent() {
      if (userEventBuilder_ == null) {
        userEvent_ = null;
        onChanged();
      } else {
        userEvent_ = null;
        userEventBuilder_ = null;
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. Context about the user, what they are looking at and what action
     * they took to trigger the Recommend request. Note that this user event
     * detail won't be ingested to userEvent logs. Thus, a separate userEvent
     * write request is required for event logging.
     * Don't set
     * [UserEvent.user_pseudo_id][google.cloud.discoveryengine.v1beta.UserEvent.user_pseudo_id]
     * or
     * [UserEvent.user_info.user_id][google.cloud.discoveryengine.v1beta.UserInfo.user_id]
     * to the same fixed ID for different users. If you are trying to receive
     * non-personalized recommendations (not recommended; this can negatively
     * impact model performance), instead set
     * [UserEvent.user_pseudo_id][google.cloud.discoveryengine.v1beta.UserEvent.user_pseudo_id]
     * to a random unique ID and leave
     * [UserEvent.user_info.user_id][google.cloud.discoveryengine.v1beta.UserInfo.user_id]
     * unset.
     * </pre>
     *
     * <code>
     * .google.cloud.discoveryengine.v1beta.UserEvent user_event = 2 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public com.google.cloud.discoveryengine.v1beta.UserEvent.Builder getUserEventBuilder() {

      onChanged();
      return getUserEventFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * Required. Context about the user, what they are looking at and what action
     * they took to trigger the Recommend request. Note that this user event
     * detail won't be ingested to userEvent logs. Thus, a separate userEvent
     * write request is required for event logging.
     * Don't set
     * [UserEvent.user_pseudo_id][google.cloud.discoveryengine.v1beta.UserEvent.user_pseudo_id]
     * or
     * [UserEvent.user_info.user_id][google.cloud.discoveryengine.v1beta.UserInfo.user_id]
     * to the same fixed ID for different users. If you are trying to receive
     * non-personalized recommendations (not recommended; this can negatively
     * impact model performance), instead set
     * [UserEvent.user_pseudo_id][google.cloud.discoveryengine.v1beta.UserEvent.user_pseudo_id]
     * to a random unique ID and leave
     * [UserEvent.user_info.user_id][google.cloud.discoveryengine.v1beta.UserInfo.user_id]
     * unset.
     * </pre>
     *
     * <code>
     * .google.cloud.discoveryengine.v1beta.UserEvent user_event = 2 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    public com.google.cloud.discoveryengine.v1beta.UserEventOrBuilder getUserEventOrBuilder() {
      if (userEventBuilder_ != null) {
        return userEventBuilder_.getMessageOrBuilder();
      } else {
        return userEvent_ == null
            ? com.google.cloud.discoveryengine.v1beta.UserEvent.getDefaultInstance()
            : userEvent_;
      }
    }
    /**
     *
     *
     * <pre>
     * Required. Context about the user, what they are looking at and what action
     * they took to trigger the Recommend request. Note that this user event
     * detail won't be ingested to userEvent logs. Thus, a separate userEvent
     * write request is required for event logging.
     * Don't set
     * [UserEvent.user_pseudo_id][google.cloud.discoveryengine.v1beta.UserEvent.user_pseudo_id]
     * or
     * [UserEvent.user_info.user_id][google.cloud.discoveryengine.v1beta.UserInfo.user_id]
     * to the same fixed ID for different users. If you are trying to receive
     * non-personalized recommendations (not recommended; this can negatively
     * impact model performance), instead set
     * [UserEvent.user_pseudo_id][google.cloud.discoveryengine.v1beta.UserEvent.user_pseudo_id]
     * to a random unique ID and leave
     * [UserEvent.user_info.user_id][google.cloud.discoveryengine.v1beta.UserInfo.user_id]
     * unset.
     * </pre>
     *
     * <code>
     * .google.cloud.discoveryengine.v1beta.UserEvent user_event = 2 [(.google.api.field_behavior) = REQUIRED];
     * </code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.cloud.discoveryengine.v1beta.UserEvent,
            com.google.cloud.discoveryengine.v1beta.UserEvent.Builder,
            com.google.cloud.discoveryengine.v1beta.UserEventOrBuilder>
        getUserEventFieldBuilder() {
      if (userEventBuilder_ == null) {
        userEventBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.cloud.discoveryengine.v1beta.UserEvent,
                com.google.cloud.discoveryengine.v1beta.UserEvent.Builder,
                com.google.cloud.discoveryengine.v1beta.UserEventOrBuilder>(
                getUserEvent(), getParentForChildren(), isClean());
        userEvent_ = null;
      }
      return userEventBuilder_;
    }

    private int pageSize_;
    /**
     *
     *
     * <pre>
     * Maximum number of results to return. Set this property
     * to the number of recommendation results needed. If zero, the service will
     * choose a reasonable default. The maximum allowed value is 100. Values
     * above 100 will be coerced to 100.
     * </pre>
     *
     * <code>int32 page_size = 3;</code>
     *
     * @return The pageSize.
     */
    @java.lang.Override
    public int getPageSize() {
      return pageSize_;
    }
    /**
     *
     *
     * <pre>
     * Maximum number of results to return. Set this property
     * to the number of recommendation results needed. If zero, the service will
     * choose a reasonable default. The maximum allowed value is 100. Values
     * above 100 will be coerced to 100.
     * </pre>
     *
     * <code>int32 page_size = 3;</code>
     *
     * @param value The pageSize to set.
     * @return This builder for chaining.
     */
    public Builder setPageSize(int value) {

      pageSize_ = value;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Maximum number of results to return. Set this property
     * to the number of recommendation results needed. If zero, the service will
     * choose a reasonable default. The maximum allowed value is 100. Values
     * above 100 will be coerced to 100.
     * </pre>
     *
     * <code>int32 page_size = 3;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearPageSize() {

      pageSize_ = 0;
      onChanged();
      return this;
    }

    private java.lang.Object filter_ = "";
    /**
     *
     *
     * <pre>
     * Filter for restricting recommendation results with a length limit of 5,000
     * characters. Currently, only filter expressions on the `filter_tags`
     * attribute is supported.
     * Examples:
     *  * (filter_tags: ANY("Red", "Blue") OR filter_tags: ANY("Hot", "Cold"))
     *  * (filter_tags: ANY("Red", "Blue")) AND NOT (filter_tags: ANY("Green"))
     * If your filter blocks all results, the API will return generic
     * (unfiltered) popular Documents. If you only want results strictly matching
     * the filters, set `strictFiltering` to True in
     * [RecommendRequest.params][google.cloud.discoveryengine.v1beta.RecommendRequest.params]
     * to receive empty results instead.
     * Note that the API will never return Documents with storageStatus of
     * "EXPIRED" or "DELETED" regardless of filter choices.
     * </pre>
     *
     * <code>string filter = 4;</code>
     *
     * @return The filter.
     */
    public java.lang.String getFilter() {
      java.lang.Object ref = filter_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        filter_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * Filter for restricting recommendation results with a length limit of 5,000
     * characters. Currently, only filter expressions on the `filter_tags`
     * attribute is supported.
     * Examples:
     *  * (filter_tags: ANY("Red", "Blue") OR filter_tags: ANY("Hot", "Cold"))
     *  * (filter_tags: ANY("Red", "Blue")) AND NOT (filter_tags: ANY("Green"))
     * If your filter blocks all results, the API will return generic
     * (unfiltered) popular Documents. If you only want results strictly matching
     * the filters, set `strictFiltering` to True in
     * [RecommendRequest.params][google.cloud.discoveryengine.v1beta.RecommendRequest.params]
     * to receive empty results instead.
     * Note that the API will never return Documents with storageStatus of
     * "EXPIRED" or "DELETED" regardless of filter choices.
     * </pre>
     *
     * <code>string filter = 4;</code>
     *
     * @return The bytes for filter.
     */
    public com.google.protobuf.ByteString getFilterBytes() {
      java.lang.Object ref = filter_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        filter_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * Filter for restricting recommendation results with a length limit of 5,000
     * characters. Currently, only filter expressions on the `filter_tags`
     * attribute is supported.
     * Examples:
     *  * (filter_tags: ANY("Red", "Blue") OR filter_tags: ANY("Hot", "Cold"))
     *  * (filter_tags: ANY("Red", "Blue")) AND NOT (filter_tags: ANY("Green"))
     * If your filter blocks all results, the API will return generic
     * (unfiltered) popular Documents. If you only want results strictly matching
     * the filters, set `strictFiltering` to True in
     * [RecommendRequest.params][google.cloud.discoveryengine.v1beta.RecommendRequest.params]
     * to receive empty results instead.
     * Note that the API will never return Documents with storageStatus of
     * "EXPIRED" or "DELETED" regardless of filter choices.
     * </pre>
     *
     * <code>string filter = 4;</code>
     *
     * @param value The filter to set.
     * @return This builder for chaining.
     */
    public Builder setFilter(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }

      filter_ = value;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Filter for restricting recommendation results with a length limit of 5,000
     * characters. Currently, only filter expressions on the `filter_tags`
     * attribute is supported.
     * Examples:
     *  * (filter_tags: ANY("Red", "Blue") OR filter_tags: ANY("Hot", "Cold"))
     *  * (filter_tags: ANY("Red", "Blue")) AND NOT (filter_tags: ANY("Green"))
     * If your filter blocks all results, the API will return generic
     * (unfiltered) popular Documents. If you only want results strictly matching
     * the filters, set `strictFiltering` to True in
     * [RecommendRequest.params][google.cloud.discoveryengine.v1beta.RecommendRequest.params]
     * to receive empty results instead.
     * Note that the API will never return Documents with storageStatus of
     * "EXPIRED" or "DELETED" regardless of filter choices.
     * </pre>
     *
     * <code>string filter = 4;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearFilter() {

      filter_ = getDefaultInstance().getFilter();
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Filter for restricting recommendation results with a length limit of 5,000
     * characters. Currently, only filter expressions on the `filter_tags`
     * attribute is supported.
     * Examples:
     *  * (filter_tags: ANY("Red", "Blue") OR filter_tags: ANY("Hot", "Cold"))
     *  * (filter_tags: ANY("Red", "Blue")) AND NOT (filter_tags: ANY("Green"))
     * If your filter blocks all results, the API will return generic
     * (unfiltered) popular Documents. If you only want results strictly matching
     * the filters, set `strictFiltering` to True in
     * [RecommendRequest.params][google.cloud.discoveryengine.v1beta.RecommendRequest.params]
     * to receive empty results instead.
     * Note that the API will never return Documents with storageStatus of
     * "EXPIRED" or "DELETED" regardless of filter choices.
     * </pre>
     *
     * <code>string filter = 4;</code>
     *
     * @param value The bytes for filter to set.
     * @return This builder for chaining.
     */
    public Builder setFilterBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);

      filter_ = value;
      onChanged();
      return this;
    }

    private boolean validateOnly_;
    /**
     *
     *
     * <pre>
     * Use validate only mode for this recommendation query. If set to true, a
     * fake model will be used that returns arbitrary Document IDs.
     * Note that the validate only mode should only be used for testing the API,
     * or if the model is not ready.
     * </pre>
     *
     * <code>bool validate_only = 5;</code>
     *
     * @return The validateOnly.
     */
    @java.lang.Override
    public boolean getValidateOnly() {
      return validateOnly_;
    }
    /**
     *
     *
     * <pre>
     * Use validate only mode for this recommendation query. If set to true, a
     * fake model will be used that returns arbitrary Document IDs.
     * Note that the validate only mode should only be used for testing the API,
     * or if the model is not ready.
     * </pre>
     *
     * <code>bool validate_only = 5;</code>
     *
     * @param value The validateOnly to set.
     * @return This builder for chaining.
     */
    public Builder setValidateOnly(boolean value) {

      validateOnly_ = value;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Use validate only mode for this recommendation query. If set to true, a
     * fake model will be used that returns arbitrary Document IDs.
     * Note that the validate only mode should only be used for testing the API,
     * or if the model is not ready.
     * </pre>
     *
     * <code>bool validate_only = 5;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearValidateOnly() {

      validateOnly_ = false;
      onChanged();
      return this;
    }

    private com.google.protobuf.MapField<java.lang.String, com.google.protobuf.Value> params_;

    private com.google.protobuf.MapField<java.lang.String, com.google.protobuf.Value>
        internalGetParams() {
      if (params_ == null) {
        return com.google.protobuf.MapField.emptyMapField(ParamsDefaultEntryHolder.defaultEntry);
      }
      return params_;
    }

    private com.google.protobuf.MapField<java.lang.String, com.google.protobuf.Value>
        internalGetMutableParams() {
      onChanged();
      ;
      if (params_ == null) {
        params_ = com.google.protobuf.MapField.newMapField(ParamsDefaultEntryHolder.defaultEntry);
      }
      if (!params_.isMutable()) {
        params_ = params_.copy();
      }
      return params_;
    }

    public int getParamsCount() {
      return internalGetParams().getMap().size();
    }
    /**
     *
     *
     * <pre>
     * Additional domain specific parameters for the recommendations.
     * Allowed values:
     * * `returnDocument`: Boolean. If set to true, the associated Document
     *    object will be returned in
     *    [RecommendResponse.results.document][RecommendationResult.document].
     * * `returnScore`: Boolean. If set to true, the recommendation 'score'
     *    corresponding to each returned Document will be set in
     *    [RecommendResponse.results.metadata][RecommendationResult.metadata]. The
     *    given 'score' indicates the probability of a Document conversion given
     *    the user's context and history.
     * * `strictFiltering`: Boolean. True by default. If set to false, the service
     *    will return generic (unfiltered) popular Documents instead of empty if
     *    your filter blocks all recommendation results.
     * * `diversityLevel`: String. Default empty. If set to be non-empty, then
     *    it needs to be one of:
     *    *  'no-diversity'
     *    *  'low-diversity'
     *    *  'medium-diversity'
     *    *  'high-diversity'
     *    *  'auto-diversity'
     *    This gives request-level control and adjusts recommendation results
     *    based on Document category.
     * </pre>
     *
     * <code>map&lt;string, .google.protobuf.Value&gt; params = 6;</code>
     */
    @java.lang.Override
    public boolean containsParams(java.lang.String key) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      return internalGetParams().getMap().containsKey(key);
    }
    /** Use {@link #getParamsMap()} instead. */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.google.protobuf.Value> getParams() {
      return getParamsMap();
    }
    /**
     *
     *
     * <pre>
     * Additional domain specific parameters for the recommendations.
     * Allowed values:
     * * `returnDocument`: Boolean. If set to true, the associated Document
     *    object will be returned in
     *    [RecommendResponse.results.document][RecommendationResult.document].
     * * `returnScore`: Boolean. If set to true, the recommendation 'score'
     *    corresponding to each returned Document will be set in
     *    [RecommendResponse.results.metadata][RecommendationResult.metadata]. The
     *    given 'score' indicates the probability of a Document conversion given
     *    the user's context and history.
     * * `strictFiltering`: Boolean. True by default. If set to false, the service
     *    will return generic (unfiltered) popular Documents instead of empty if
     *    your filter blocks all recommendation results.
     * * `diversityLevel`: String. Default empty. If set to be non-empty, then
     *    it needs to be one of:
     *    *  'no-diversity'
     *    *  'low-diversity'
     *    *  'medium-diversity'
     *    *  'high-diversity'
     *    *  'auto-diversity'
     *    This gives request-level control and adjusts recommendation results
     *    based on Document category.
     * </pre>
     *
     * <code>map&lt;string, .google.protobuf.Value&gt; params = 6;</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.String, com.google.protobuf.Value> getParamsMap() {
      return internalGetParams().getMap();
    }
    /**
     *
     *
     * <pre>
     * Additional domain specific parameters for the recommendations.
     * Allowed values:
     * * `returnDocument`: Boolean. If set to true, the associated Document
     *    object will be returned in
     *    [RecommendResponse.results.document][RecommendationResult.document].
     * * `returnScore`: Boolean. If set to true, the recommendation 'score'
     *    corresponding to each returned Document will be set in
     *    [RecommendResponse.results.metadata][RecommendationResult.metadata]. The
     *    given 'score' indicates the probability of a Document conversion given
     *    the user's context and history.
     * * `strictFiltering`: Boolean. True by default. If set to false, the service
     *    will return generic (unfiltered) popular Documents instead of empty if
     *    your filter blocks all recommendation results.
     * * `diversityLevel`: String. Default empty. If set to be non-empty, then
     *    it needs to be one of:
     *    *  'no-diversity'
     *    *  'low-diversity'
     *    *  'medium-diversity'
     *    *  'high-diversity'
     *    *  'auto-diversity'
     *    This gives request-level control and adjusts recommendation results
     *    based on Document category.
     * </pre>
     *
     * <code>map&lt;string, .google.protobuf.Value&gt; params = 6;</code>
     */
    @java.lang.Override
    public com.google.protobuf.Value getParamsOrDefault(
        java.lang.String key, com.google.protobuf.Value defaultValue) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      java.util.Map<java.lang.String, com.google.protobuf.Value> map = internalGetParams().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     *
     *
     * <pre>
     * Additional domain specific parameters for the recommendations.
     * Allowed values:
     * * `returnDocument`: Boolean. If set to true, the associated Document
     *    object will be returned in
     *    [RecommendResponse.results.document][RecommendationResult.document].
     * * `returnScore`: Boolean. If set to true, the recommendation 'score'
     *    corresponding to each returned Document will be set in
     *    [RecommendResponse.results.metadata][RecommendationResult.metadata]. The
     *    given 'score' indicates the probability of a Document conversion given
     *    the user's context and history.
     * * `strictFiltering`: Boolean. True by default. If set to false, the service
     *    will return generic (unfiltered) popular Documents instead of empty if
     *    your filter blocks all recommendation results.
     * * `diversityLevel`: String. Default empty. If set to be non-empty, then
     *    it needs to be one of:
     *    *  'no-diversity'
     *    *  'low-diversity'
     *    *  'medium-diversity'
     *    *  'high-diversity'
     *    *  'auto-diversity'
     *    This gives request-level control and adjusts recommendation results
     *    based on Document category.
     * </pre>
     *
     * <code>map&lt;string, .google.protobuf.Value&gt; params = 6;</code>
     */
    @java.lang.Override
    public com.google.protobuf.Value getParamsOrThrow(java.lang.String key) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      java.util.Map<java.lang.String, com.google.protobuf.Value> map = internalGetParams().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public Builder clearParams() {
      internalGetMutableParams().getMutableMap().clear();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Additional domain specific parameters for the recommendations.
     * Allowed values:
     * * `returnDocument`: Boolean. If set to true, the associated Document
     *    object will be returned in
     *    [RecommendResponse.results.document][RecommendationResult.document].
     * * `returnScore`: Boolean. If set to true, the recommendation 'score'
     *    corresponding to each returned Document will be set in
     *    [RecommendResponse.results.metadata][RecommendationResult.metadata]. The
     *    given 'score' indicates the probability of a Document conversion given
     *    the user's context and history.
     * * `strictFiltering`: Boolean. True by default. If set to false, the service
     *    will return generic (unfiltered) popular Documents instead of empty if
     *    your filter blocks all recommendation results.
     * * `diversityLevel`: String. Default empty. If set to be non-empty, then
     *    it needs to be one of:
     *    *  'no-diversity'
     *    *  'low-diversity'
     *    *  'medium-diversity'
     *    *  'high-diversity'
     *    *  'auto-diversity'
     *    This gives request-level control and adjusts recommendation results
     *    based on Document category.
     * </pre>
     *
     * <code>map&lt;string, .google.protobuf.Value&gt; params = 6;</code>
     */
    public Builder removeParams(java.lang.String key) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      internalGetMutableParams().getMutableMap().remove(key);
      return this;
    }
    /** Use alternate mutation accessors instead. */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.google.protobuf.Value> getMutableParams() {
      return internalGetMutableParams().getMutableMap();
    }
    /**
     *
     *
     * <pre>
     * Additional domain specific parameters for the recommendations.
     * Allowed values:
     * * `returnDocument`: Boolean. If set to true, the associated Document
     *    object will be returned in
     *    [RecommendResponse.results.document][RecommendationResult.document].
     * * `returnScore`: Boolean. If set to true, the recommendation 'score'
     *    corresponding to each returned Document will be set in
     *    [RecommendResponse.results.metadata][RecommendationResult.metadata]. The
     *    given 'score' indicates the probability of a Document conversion given
     *    the user's context and history.
     * * `strictFiltering`: Boolean. True by default. If set to false, the service
     *    will return generic (unfiltered) popular Documents instead of empty if
     *    your filter blocks all recommendation results.
     * * `diversityLevel`: String. Default empty. If set to be non-empty, then
     *    it needs to be one of:
     *    *  'no-diversity'
     *    *  'low-diversity'
     *    *  'medium-diversity'
     *    *  'high-diversity'
     *    *  'auto-diversity'
     *    This gives request-level control and adjusts recommendation results
     *    based on Document category.
     * </pre>
     *
     * <code>map&lt;string, .google.protobuf.Value&gt; params = 6;</code>
     */
    public Builder putParams(java.lang.String key, com.google.protobuf.Value value) {
      if (key == null) {
        throw new NullPointerException("map key");
      }
      if (value == null) {
        throw new NullPointerException("map value");
      }

      internalGetMutableParams().getMutableMap().put(key, value);
      return this;
    }
    /**
     *
     *
     * <pre>
     * Additional domain specific parameters for the recommendations.
     * Allowed values:
     * * `returnDocument`: Boolean. If set to true, the associated Document
     *    object will be returned in
     *    [RecommendResponse.results.document][RecommendationResult.document].
     * * `returnScore`: Boolean. If set to true, the recommendation 'score'
     *    corresponding to each returned Document will be set in
     *    [RecommendResponse.results.metadata][RecommendationResult.metadata]. The
     *    given 'score' indicates the probability of a Document conversion given
     *    the user's context and history.
     * * `strictFiltering`: Boolean. True by default. If set to false, the service
     *    will return generic (unfiltered) popular Documents instead of empty if
     *    your filter blocks all recommendation results.
     * * `diversityLevel`: String. Default empty. If set to be non-empty, then
     *    it needs to be one of:
     *    *  'no-diversity'
     *    *  'low-diversity'
     *    *  'medium-diversity'
     *    *  'high-diversity'
     *    *  'auto-diversity'
     *    This gives request-level control and adjusts recommendation results
     *    based on Document category.
     * </pre>
     *
     * <code>map&lt;string, .google.protobuf.Value&gt; params = 6;</code>
     */
    public Builder putAllParams(java.util.Map<java.lang.String, com.google.protobuf.Value> values) {
      internalGetMutableParams().getMutableMap().putAll(values);
      return this;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:google.cloud.discoveryengine.v1beta.RecommendRequest)
  }

  // @@protoc_insertion_point(class_scope:google.cloud.discoveryengine.v1beta.RecommendRequest)
  private static final com.google.cloud.discoveryengine.v1beta.RecommendRequest DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new com.google.cloud.discoveryengine.v1beta.RecommendRequest();
  }

  public static com.google.cloud.discoveryengine.v1beta.RecommendRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<RecommendRequest> PARSER =
      new com.google.protobuf.AbstractParser<RecommendRequest>() {
        @java.lang.Override
        public RecommendRequest parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

  public static com.google.protobuf.Parser<RecommendRequest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<RecommendRequest> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.cloud.discoveryengine.v1beta.RecommendRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
