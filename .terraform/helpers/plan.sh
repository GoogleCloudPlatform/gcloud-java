#!/bin/bash
#
# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Ensure current directory is same as script.
helperDir="$(cd -P -- "$(dirname -- "${BASH_SOURCE[0]}")" && pwd -P)"
pushd "$helperDir/.." >/dev/null || exit

source ./helpers/gcloud-login.sh
source ./helpers/create-project.sh
createProject

# If Terraform was previously configured to work with a different project,
# then remove the previous Terraform state.
prev_project_id=$(terraform output -raw project_id 2>/dev/null)
if [[ $? -eq 0 ]]; then
  if [[ "$prev_project_id" != "$GOOGLE_CLOUD_PROJECT" ]]; then
    if [[ -f terraform.tfstate ]]; then
      rm terraform.tfstate
    fi
  fi
fi

# Use the project ID in gcloud set-quota-project. Clear the existing quota project directly from
# the configuration, and re-set.
gcloud config set project "$GOOGLE_CLOUD_PROJECT"
sed -i.bak '/quota_project_id/d' ~/.config/gcloud/application_default_credentials.json
gcloud auth application-default set-quota-project "$GOOGLE_CLOUD_PROJECT"

# Assign permission for current gcloud account to impersonate a service account.
gcloud_account=$(gcloud config get account)
gcloud projects add-iam-policy-binding "$GOOGLE_CLOUD_PROJECT" \
  --member="user:$gcloud_account" \
  --role="roles/iam.serviceAccountTokenCreator" >/dev/null

# Set up service account for impersonation
project_number=$(gcloud projects describe "$GOOGLE_CLOUD_PROJECT" --format 'value(projectNumber)')
service_account_name="terraform-service-account"
service_account_email="$service_account_name@$GOOGLE_CLOUD_PROJECT.iam.gserviceaccount.com"
# If it doesn't already exist, create the service account.
gcloud iam service-accounts describe "$service_account_email" &>/dev/null
if [[ $? -ne 0 ]]; then
  gcloud iam service-accounts create "$service_account_name"
  createdServiceAccount=true
else
  createdServiceAccount=false
fi
# Assign permissions to the service account.
gcloud projects add-iam-policy-binding "$GOOGLE_CLOUD_PROJECT" \
  --member="serviceAccount:$service_account_email" \
  --role="roles/owner" >/dev/null
gcloud projects add-iam-policy-binding "$GOOGLE_CLOUD_PROJECT" \
  --member="serviceAccount:$service_account_email" \
  --role="roles/resourcemanager.projectIamAdmin" >/dev/null

# See https://cloud.google.com/blog/topics/developers-practitioners/using-google-cloud-service-account-impersonation-your-terraform-code
export GOOGLE_IMPERSONATE_SERVICE_ACCOUNT=$service_account_email

if $createdServiceAccount; then
  echo "Waiting 2m for service account permissions to take effect... [0s elapsed]"
  sleep 30
  echo "Waiting 2m for service account permissions to take effect... [30s elapsed]"
  sleep 30
  echo "Waiting 2m for service account permissions to take effect... [1m0s elapsed]"
  sleep 30
  echo "Waiting 2m for service account permissions to take effect... [1m30s elapsed]"
  sleep 30
fi

# Create generated.auto.tfvars which will be used as input values to generated-variables.tf
touch generated.auto.tfvars
echo "# Auto-generated by ./.terraform/plan.sh
project_number = \"$project_number\"
project_id = \"$GOOGLE_CLOUD_PROJECT\"
gcloud_account = \"$gcloud_account\"
service_account = \"$service_account_email\"
" >generated.auto.tfvars
terraform fmt -list=false generated.auto.tfvars

# See https://www.terraform.io/cli/commands/plan
terraform plan -out generated.tfplan || exit
terraform show -json generated.tfplan >generated.tfplan.json
