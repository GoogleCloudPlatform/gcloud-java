#
# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
function initializeGeneratedFiles() {
  touch generated-main.tf
  touch generated-outputs.tf
  touch generated-variables.tf

  echo "# Auto-generated by generate-config.sh" >generated-outputs.tf
  echo "# Auto-generated by generate-config.sh" >generated-variables.tf
  echo "# Auto-generated by generate-config.sh" >generated-main.tf

  echo "variable \"project_id\" {
    type        = string
    description = \"GCP Project ID of the project to be used\"
  }

  variable \"region\" {
    type        = string
    description = \"GCP region to deploy resources to.\"
    default     = \"us-central1\"
  }

  variable \"zone\" {
    type        = string
    description = \"GCP zone to deploy resources to. Must be a zone in the chosen region.\"
    default     = \"us-central1-c\"
  }" >>generated-variables.tf

  echo "terraform {
    required_providers {
      google = {
        source = \"hashicorp/google\"
      }
    }
  }
  provider \"google\" {
    project = var.project_id
    region  = var.region
    zone    = var.zone
  }
  locals {
    data = {
      project_id = var.project_id
      zone       = var.zone
    }
  }
  " >generated-main.tf
}

function appendOutputs() {
  underscore="_"
  outputFile="../$module/.terraform/outputs.tf"

  if [[ -f "$outputFile" ]]; then
    while IFS= read -r line; do
      if [[ $line =~ ^output[[:blank:]]+\"(.*)\"[[:blank:]]*{ ]]; then
        outputVariable="${BASH_REMATCH[1]}"
        echo "output \"$1$underscore$outputVariable\" {" >>generated-outputs.tf
      elif [[ $line =~ ^[[:blank:]]*value ]]; then
        echo "  value = module.$1.$outputVariable" >>generated-outputs.tf
      else
        echo "$line" >>generated-outputs.tf
      fi
    done <"$outputFile"
  fi
}

function appendModule() {
  friendlyName=$(echo "$1" | tr '-' _)

  echo "module \"$friendlyName\" {
    source = \"./../$1/.terraform\"
    inputs = local.data
  }" >>generated-main.tf

  appendOutputs "$friendlyName"
}

function appendAllModules() {
  # Either use given module list, or get a list of all modules in the parent directory.
  if [ -n "$1" ]; then
    modules=$1
  else
    modules=$(source ./helpers/list-all-modules.sh)
  fi
  IFS=':'
  for module in $modules; do
    if [ -d "../$module/.terraform" ]; then
      appendModule "${module%/}" # Remove possible trailing '/'
    fi
  done
}

# Ensure current directory is <root>/.terraform.
generateDir="$(cd -P -- "$(dirname -- "${BASH_SOURCE[0]}")" && pwd -P)"
pushd "$generateDir/.." >/dev/null || exit

initializeGeneratedFiles
appendAllModules "$1"

popd >/dev/null || exit
